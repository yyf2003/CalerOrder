using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Web.UI.WebControls;
using BLL;
using Common;
using DAL;
using Models;
using NPOI.SS.UserModel;
using System.Web;

namespace WebApp.Statistics
{
    public partial class InstallPriceDetail : BasePage
    {
        string guidanceIds = string.Empty;
        string subjectIds = string.Empty;
        string region = string.Empty;
        string province = string.Empty;
        string city = string.Empty;
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Request.QueryString["guidanceIds"] != null)
            {
                guidanceIds = Request.QueryString["guidanceIds"];
            }
            if (Request.QueryString["subjectIds"] != null)
            {
                subjectIds = Request.QueryString["subjectIds"];
            }

            if (Request.QueryString["regions"] != null)
            {
                region = Request.QueryString["regions"];
            }
            if (Request.QueryString["provinces"] != null)
            {
                province = Request.QueryString["provinces"];
            }
            if (!IsPostBack)
            {
                BindData();
            }
        }

        List<Shop> shopList = new List<Shop>();
        void GetData()
        {
            List<int> guidanceIdList = new List<int>();
            
            if (!string.IsNullOrWhiteSpace(guidanceIds))
            {
                guidanceIdList = StringHelper.ToIntList(guidanceIds,',');
            }
            
            
            shopList = new List<Shop>();
            if (guidanceIdList.Any())
            {
               
                //var orderList = (from order in CurrentContext.DbContext.FinalOrderDetailTemp
                //                 join subject in CurrentContext.DbContext.Subject
                //                 on order.SubjectId equals subject.Id
                //                 join guidance in CurrentContext.DbContext.SubjectGuidance
                //                 on subject.GuidanceId equals guidance.ItemId
                //                 join shop in CurrentContext.DbContext.Shop
                //                 on order.ShopId equals shop.Id

                //                 where subjectIdList.Contains(subject.Id) && (guidance.ActivityTypeId ?? 1) == 1//=1是安装的活动
                //                 select new
                //                 {
                //                     order,
                //                     shop,
                //                     guidance
                //                 }).ToList();
                var orderList = (from order in CurrentContext.DbContext.FinalOrderDetailTemp
                                  join shop in CurrentContext.DbContext.Shop
                                  on order.ShopId equals shop.Id
                                  join subject in CurrentContext.DbContext.Subject
                                  on order.SubjectId equals subject.Id
                                  join guidance in CurrentContext.DbContext.SubjectGuidance
                                  on subject.GuidanceId equals guidance.ItemId
                                  join pop1 in CurrentContext.DbContext.POP
                                  on new { order.ShopId, order.Sheet, order.GraphicNo } equals new { pop1.ShopId, pop1.Sheet, pop1.GraphicNo } into popTemp
                                  from pop in popTemp.DefaultIfEmpty()
                                  where guidanceIdList.Contains(subject.GuidanceId ?? 0)
                                  && (guidance.ActivityTypeId??1)==1
                                  && (subject.IsDelete == null || subject.IsDelete == false)
                                  && subject.ApproveState == 1
                                  && (order.IsDelete == null || order.IsDelete == false)
                                  && ((order.OrderType == 1 && order.GraphicLength != null && order.GraphicLength > 0 && order.GraphicWidth != null && order.GraphicWidth > 0) || (order.OrderType == 2))
                                  && (shop.IsInstall!=null && shop.IsInstall=="Y")
                                  //&& (shop.Status == null || shop.Status == "" || shop.Status == "正常")
                                 select new { guidance, order, shop, subject, pop }).ToList();


                //if (subjectIdList.Any())
                //{
                //    orderList = orderList.Where(s => subjectIdList.Contains(s.subject.Id)).ToList();
                //}
                List<string> regionList1 = new List<string>();
                List<string> provinceList1 = new List<string>();
                List<string> cityList1 = new List<string>();
                if (!string.IsNullOrWhiteSpace(region))
                {
                    regionList1 = StringHelper.ToStringList(region, ',', LowerUpperEnum.ToLower);
                }
                else
                {
                    GetResponsibleRegion.ForEach(s =>
                    {
                        regionList1.Add(s.ToLower());
                    });

                }
                if (regionList1.Any())
                {

                    orderList = orderList.Where(s => regionList1.Contains(s.shop.RegionName.ToLower())).ToList();
                    if (!string.IsNullOrWhiteSpace(province))
                    {
                        provinceList1 = StringHelper.ToStringList(province, ',');
                        if (provinceList1.Any())
                        {
                            orderList = orderList.Where(s => provinceList1.Contains(s.shop.ProvinceName)).ToList();
                        }
                    }
                }

                if (orderList.Any())
                {

                    guidanceIdList.ForEach(g => {
                        var list1 = orderList.Where(s => s.guidance.ItemId == g).OrderBy(s => s.subject.Id).ToList();
                        //int shopCount = list1.Select(s => s.shop.Id).Distinct().Count();
                        //计算基础安装费的店铺Id,所有项目中，相同店铺只算一次
                        List<int> basicInstallPriceShop = new List<int>();

                        //计算橱窗安装费的店铺Id,所有项目中，相同店铺只算一次
                        List<int> windowInstallPriceShop = new List<int>();
                        if (list1.Any())
                        {
                            int subjectId = 0;
                            //基础安装费
                            
                            //橱窗安装费(同一个店，无论有多少个橱窗订单，都算一次)
                            
                            List<int> windowSheetShopIdList = new List<int>();
                            Shop shopModel;
                            list1.ForEach(sub => {
                                shopModel = new Shop();
                                shopModel.Id = sub.shop.Id;
                                shopModel.ShopName = sub.shop.ShopName;
                                shopModel.ShopNo = sub.shop.ShopNo;
                                shopModel.RegionName = sub.shop.RegionName;
                                shopModel.ProvinceName = sub.shop.ProvinceName;
                                shopModel.CityName = sub.shop.CityName;
                                shopModel.CityTier = sub.shop.CityTier;
                                shopModel.Format = sub.shop.Format;
                                shopModel.AddDate = sub.shop.AddDate;
                                shopModel.AgentCode = sub.shop.AgentCode;
                                shopModel.AgentName = sub.shop.AgentName;
                                shopModel.Channel = sub.shop.Channel;
                                shopModel.GuidanceId = sub.guidance.ItemId;
                                shopModel.SubjectId = sub.order.SubjectId;
                                shopModel.POSScale = sub.order.POSScale;
                                shopModel.MaterialSupport = sub.order.MaterialSupport;
                                shopModel.GuidanceName = sub.guidance.ItemName;
                                shopModel.SubjectName = sub.subject.SubjectName;
                                shopModel.IsInstall = sub.shop.IsInstall;
                                //decimal basicInstallPrice = 0;
                                //decimal windowInstallPrice = 0;
                                //逐个项目统计
                                if (subjectId != sub.subject.Id)
                                {
                                    subjectId = sub.subject.Id;
                                    windowSheetShopIdList = list1.Where(s => s.subject.Id == subjectId && (s.order.Sheet == "橱窗" || s.order.Sheet.ToLower() == "window")).Select(s => s.shop.Id).Distinct().ToList();
                                }
                                //基础安装费
                                if (!basicInstallPriceShop.Contains(sub.shop.Id))
                                {
                                    basicInstallPriceShop.Add(sub.shop.Id);
                                    if ((sub.shop.BasicInstallPrice ?? 0) > 0)
                                    {
                                        shopModel.BasicInstallPrice = (sub.shop.BasicInstallPrice ?? 0);
                                    }
                                    else
                                        shopModel.BasicInstallPrice = GetBasicInstallPrice(sub.order.MaterialSupport);
                                }
                                else
                                {
                                    shopModel.BasicInstallPrice = 0;
                                }
                                //橱窗安装费
                                if (windowSheetShopIdList.Contains(sub.shop.Id) && !windowInstallPriceShop.Contains(sub.shop.Id))
                                {
                                    windowInstallPriceShop.Add(sub.shop.Id);
                                   
                                    shopModel.WindowInstallPrice = GetWindowInstallPrice(sub.order.MaterialSupport); ;
                                }
                                else
                                {
                                    shopModel.WindowInstallPrice = 0;
                                }
                                if ((shopModel.BasicInstallPrice +shopModel.WindowInstallPrice)>0)
                                shopList.Add(shopModel);
                            });

                            //户外安装费
                            //户外订单(同一个店，如果有2个以上的户外位置订单，按最高算)
                            var oohOrderList = list1.Where(s => s.pop != null && (s.order.Sheet == "户外" || s.order.Sheet.ToLower() == "ooh") && (s.pop.OOHInstallPrice??0)>0).Select(s => new { ShopId = s.shop.Id, SubjectId = s.subject.Id, OOHInstallPrice = s.pop.OOHInstallPrice ?? 0 }).ToList();
                            //.Join(oohOrderList, a => new { a.ShopId, a.OOHInstallPrice }, b => new { b.shop.Id, b.pop.OOHInstallPrice }, (a, b) => new {b.subject.Id,ShopId=b.shop.Id,a.OOHInstallPrice });
                            if (oohOrderList.Any())
                            {
                                var oohList = (from order in oohOrderList
                                               group order by new
                                               {
                                                   order.ShopId
                                               } into item
                                               select new
                                               {
                                                   item.Key.ShopId,
                                                   OOHInstallPrice = item.Max(s => s.OOHInstallPrice)
                                               }).ToList();
                                var finaloohList = (from order in oohOrderList
                                                    join ooh in oohList
                                                    on new { order.ShopId, order.OOHInstallPrice } equals new { ooh.ShopId, ooh.OOHInstallPrice }
                                                    select new
                                                    {
                                                        order.SubjectId,
                                                        ooh.ShopId,
                                                        ooh.OOHInstallPrice
                                                    }).Distinct().ToList();

                                if (finaloohList.Any())
                                {
                                    finaloohList.ForEach(f =>
                                    {
                                        var model = shopList.Where(sh => sh.Id == f.ShopId && sh.SubjectId == f.SubjectId).FirstOrDefault();
                                        if (model != null)
                                        {
                                            int index = shopList.IndexOf(model);
                                            model.OOHInstallPrice = f.OOHInstallPrice;
                                            shopList[index] = model;
                                        }
                                    });
                                }
                            }

                        }
                    });


                }

            }
            
        }

        void BindData()
        {
            GetData();
            var list = shopList;
            List<int> subjectIdList = new List<int>();
            if (!string.IsNullOrWhiteSpace(subjectIds))
            {
                subjectIdList = StringHelper.ToIntList(subjectIds, ',');
                if (subjectIdList.Any())
                {
                    list = list.Where(s => subjectIdList.Contains(s.SubjectId??0)).ToList();
                }
            }

            if (labShopCount.Text == "0")
            {
                decimal totalPrice = list.Sum(s=>s.BasicInstallPrice+s.OOHInstallPrice+s.WindowInstallPrice)??0;
                labShopCount.Text = list.Select(s=>s.Id).Distinct().Count().ToString();
                labTotalPrice.Text = Math.Round(totalPrice, 2).ToString();
            }
            AspNetPager1.RecordCount = list.Count;
            this.AspNetPager1.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPager1.CurrentPageIndex, this.AspNetPager1.PageCount, this.AspNetPager1.RecordCount, this.AspNetPager1.PageSize });
            gvPrice.DataSource = list.OrderBy(s=>s.GuidanceId).ThenBy(s => s.ShopNo).Skip((AspNetPager1.CurrentPageIndex - 1) * AspNetPager1.PageSize).Take(AspNetPager1.PageSize).ToList();
            gvPrice.DataBind();   
        }

        protected void AspNetPager1_PageChanged(object sender, EventArgs e)
        {
            BindData();
        }

        protected void gvPrice_ItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            if (e.Item.ItemIndex != -1)
            {
                Shop shop = e.Item.DataItem as Shop;
                if (shop != null)
                {
                    Label labTotal = (Label)e.Item.FindControl("labTotal");
                    decimal total = (shop.BasicInstallPrice ?? 0) + (shop.WindowInstallPrice ?? 0) + shop.OOHInstallPrice;
                    labTotal.Text = Math.Round(total, 2).ToString();
                }
            }
        }

        protected void btnExport_Click(object sender, EventArgs e)
        {
            GetData();
            var list = shopList.OrderBy(s => s.GuidanceId).ThenBy(s => s.ShopNo).ToList();
            List<int> subjectIdList = new List<int>();
            if (!string.IsNullOrWhiteSpace(subjectIds))
            {
                subjectIdList = StringHelper.ToIntList(subjectIds, ',');
                if (subjectIdList.Any())
                {
                    list = list.Where(s => subjectIdList.Contains(s.SubjectId ?? 0)).ToList();
                }
            }
            if (list.Any())
            {
                string templateFileName = "InstallPriceTemplate";
                string path = ConfigurationManager.AppSettings["ExportTemplate"];
                path = path.Replace("fileName", templateFileName);
                FileStream outFile = new FileStream(Server.MapPath(path), FileMode.Open, FileAccess.Read, FileShare.Read);
                IWorkbook workBook = WorkbookFactory.Create(outFile, ImportOption.All);

                ISheet sheet = workBook.GetSheet("Sheet1");

                int startRow = 1;
                string shopno = string.Empty;
                foreach (var item in list)
                {


                    
                    IRow dataRow = sheet.GetRow(startRow);
                    if (dataRow == null)
                        dataRow = sheet.CreateRow(startRow);
                    for (int i = 0; i < 30; i++)
                    {
                        ICell cell = dataRow.GetCell(i);
                        if (cell == null)
                            cell = dataRow.CreateCell(i);

                    }

                    double basicInstallPrice = double.Parse((item.BasicInstallPrice ?? 0).ToString());
                    double windowInstallPrice = double.Parse((item.WindowInstallPrice ?? 0).ToString());
                    double oohInstallPrice = double.Parse(item.OOHInstallPrice.ToString());

                    dataRow.GetCell(0).SetCellValue(item.GuidanceName);
                    dataRow.GetCell(1).SetCellValue(item.SubjectName);
                    dataRow.GetCell(2).SetCellValue(item.ShopNo);
                    dataRow.GetCell(3).SetCellValue(item.ShopName);
                    dataRow.GetCell(4).SetCellValue(item.POPAddress);
                    dataRow.GetCell(5).SetCellValue(item.RegionName);
                    dataRow.GetCell(6).SetCellValue(item.ProvinceName);
                    dataRow.GetCell(7).SetCellValue(item.CityName);
                    dataRow.GetCell(8).SetCellValue(item.CityTier);
                    dataRow.GetCell(9).SetCellValue(item.IsInstall);
                    dataRow.GetCell(10).SetCellValue(item.MaterialSupport);
                    dataRow.GetCell(11).SetCellValue(basicInstallPrice);
                    dataRow.GetCell(12).SetCellValue(windowInstallPrice);
                    dataRow.GetCell(13).SetCellValue(oohInstallPrice);
                    dataRow.GetCell(14).SetCellValue(basicInstallPrice + windowInstallPrice + oohInstallPrice);
                    
                    startRow++;

                }
                HttpCookie cookie = Request.Cookies["安装费明细"];
                if (cookie == null)
                {
                    cookie = new HttpCookie("安装费明细");
                }
                cookie.Value = "1";
                cookie.Expires = DateTime.Now.AddMinutes(30);
                Response.Cookies.Add(cookie);
                

                using (MemoryStream ms = new MemoryStream())
                {
                    workBook.Write(ms);
                    ms.Flush();

                    sheet = null;

                    workBook = null;
                    OperateFile.DownLoadFile(ms, "安装费明细");
                    

                }
            }
            else
            { 
               
            }
        }
    }
}