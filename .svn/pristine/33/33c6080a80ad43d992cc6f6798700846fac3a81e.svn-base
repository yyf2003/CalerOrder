using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using BLL;
using DAL;
using Models;
using Newtonsoft.Json;
using System.Text;
using Common;

namespace WebApp.Customer.Handler
{
    /// <summary>
    /// BasicMachineFrameList 的摘要说明
    /// </summary>
    public class BasicMachineFrameList : IHttpHandler
    {
        HttpContext context1;
        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentType = "text/plain";
            context1 = context;
            string type = string.Empty;
            string result = string.Empty;

            if (context.Request.QueryString["type"] != null)
            {
                type = context.Request.QueryString["type"];
            }
            switch (type)
            {
                case "getSheet":
                    result = GetSheetFromFrame();
                    break;
                case "bindSheet":
                    result = GetSheet();
                    break;
                case "getList":
                    result = GetMachineFrame();
                    break;
                case "edit":
                    result = Edit();
                    break;
                case "delete":
                    string ids = string.Empty;
                    string sheet = string.Empty;
                    if (context.Request.QueryString["ids"] != null)
                    {
                        ids = context.Request.QueryString["ids"];
                    }
                    if (context.Request.QueryString["sheet"] != null)
                    {
                        sheet = context.Request.QueryString["sheet"];
                    }
                    result = Delete(ids, sheet);
                    break;
                default:
                    break;
            }
            context.Response.Write(result);
        }

        string GetSheet()
        {
            var list = new PositionBLL().GetList(s=>s.Id>0);
            string result = string.Empty;
            if (list.Any())
            {
                StringBuilder json = new StringBuilder();
                list.ForEach(s => {
                    json.Append("{\"Sheet\":\""+s.PositionName+"\"},");
                });
                result = "["+json.ToString().TrimEnd(',')+"]";
            }
            return result;
        }

        /// <summary>
        /// 从基础器架表获取
        /// </summary>
        /// <returns></returns>
        string GetSheetFromFrame()
        {
            string result = string.Empty;
            List<string> list = new BasicMachineFrameBLL().GetList(s => s.Id > 0).Select(s=>s.Sheet).OrderBy(s=>s).Distinct().ToList();
            if (list.Any())
            {
                StringBuilder json = new StringBuilder();
                list.ForEach(s =>
                {
                    json.Append("{\"Sheet\":\"" + s + "\"},");
                });
                result = "[" + json.ToString().TrimEnd(',') + "]";
            }
            else
                result = "[]";
            return result;
        }

        string GetMachineFrame()
        {
            int currPage = 0;
            int pageSize = 0;
            string sheet = string.Empty;
            string frameName = string.Empty;
            if (context1.Request.QueryString["currpage"] != null)
            {
                currPage = int.Parse(context1.Request.QueryString["currpage"]);
            }
            if (context1.Request.QueryString["pagesize"] != null)
            {
                pageSize = int.Parse(context1.Request.QueryString["pagesize"]);
            }
            if (context1.Request.QueryString["sheet"] != null)
            {
                sheet = context1.Request.QueryString["sheet"];
            }
            if (context1.Request.QueryString["frameName"] != null)
            {
                frameName = context1.Request.QueryString["frameName"];
            }
            var list = new BasicMachineFrameBLL().GetList(s=>s.Id>0);
            if (!string.IsNullOrWhiteSpace(sheet))
            {
                list = list.Where(s=>s.Sheet.ToLower()==sheet.ToLower()).ToList();
            }
            if (!string.IsNullOrWhiteSpace(frameName))
            {
                list = list.Where(s => s.MachineFrame.ToLower().Contains(frameName.ToLower())).ToList();
            }
            if (list.Any())
            {
                StringBuilder json = new StringBuilder();
                int totalCount = list.Count;
                list = list.OrderBy(s => s.Sheet).Skip((currPage - 1) * pageSize).Take(pageSize).ToList();
                int index = 1;
                list.ForEach(s => {
                    json.Append("{\"rowIndex\":\"" + index + "\",\"Id\":\"" + s.Id + "\",\"Sheet\":\"" + s.Sheet + "\",\"MachineFrame\":\""+s.MachineFrame+"\"},");
                    index++;
                });
                if (json.Length > 0)
                    return "{\"total\":" + totalCount + ",\"rows\":[" + json.ToString().TrimEnd(',') + "]}";
                else
                    return "{\"total\":0,\"rows\":[] }";
            }
            else
                return "{\"total\":0,\"rows\":[] }";
        }

        string Edit()
        {
            string result = "ok";
            string jsonStr = string.Empty;
            if (context1.Request.QueryString["jsonStr"] != null)
            {
                jsonStr = context1.Request.QueryString["jsonStr"];
            }
            if (!string.IsNullOrWhiteSpace(jsonStr))
            {
                jsonStr = jsonStr.Replace("+", "%2B");
                jsonStr = HttpUtility.UrlDecode(jsonStr);
                BasicMachineFrame model = JsonConvert.DeserializeObject<BasicMachineFrame>(jsonStr);
                if (model != null)
                {
                    if (!string.IsNullOrWhiteSpace(model.MachineFrame))
                    {
                        BasicMachineFrame frameModel;
                        BasicMachineFrameBLL bll = new BasicMachineFrameBLL();
                        if (model.Id > 0)
                        {
                            if (!Check(model.Id, model.Sheet, model.MachineFrame))
                            {
                                frameModel = bll.GetModel(model.Id);
                                if (frameModel != null)
                                {
                                    frameModel.MachineFrame = model.MachineFrame.ToUpper();
                                    bll.Update(frameModel);
                                    
                                }
                                else
                                    result = "提交失败";
                            }
                            else
                                result = "exist";
                        }
                        else
                        {
                            string frame = model.MachineFrame.Replace('，',',');
                            List<string> frameList = StringHelper.ToStringList(frame, ',');
                            StringBuilder msg = new StringBuilder();
                            int successNum = 0;
                            frameList.ForEach(s => {
                                if (!Check(0, model.Sheet, s))
                                {
                                    frameModel = new BasicMachineFrame();
                                    frameModel.Sheet = model.Sheet.ToUpper();
                                    frameModel.MachineFrame = s.ToUpper();
                                    bll.Add(frameModel);
                                    successNum++;
                                }
                                else
                                    msg.Append(s + "，");
                            });
                            if (msg.Length > 0)
                            {
                                if (successNum > 0)
                                {
                                    result = "1:以下器架名称重复：" + msg.ToString();
                                }
                                else
                                    result = "以下器架名称重复：" + msg.ToString();
                            }
                                
                           
                        }
                    }
                }
            }
            return result;
        }

        bool Check(int id, string sheet, string frameName)
        {
            var list = new BasicMachineFrameBLL().GetList(s => s.Sheet.ToLower() == sheet.ToLower() && s.MachineFrame.ToLower() == frameName.ToLower());
            if (id > 0)
            {
                list = list.Where(s=>s.Id!=id).ToList();
            }
            return list.Any();
        }

        string Delete(string ids,string sheet)
        {
            string result = "ok";
            if (!string.IsNullOrWhiteSpace(ids))
            {
                List<int> idList = StringHelper.ToIntList(ids,',');
                try
                {
                    BasicMachineFrameBLL bll = new BasicMachineFrameBLL();
                    bll.Delete(s => idList.Contains(s.Id));
                    var list = bll.GetList(s=>s.Sheet==sheet);
                    if (list.Any())
                    {
                        result = "ok|1";//ok:删除成功,1:该sheet下还有器架
                    }
                    else
                        result = "ok|0";//ok:删除成功,1:该sheet下没有器架
                }
                catch (Exception e)
                {
                    result = "删除失败";
                }
            }
            else
                result = "删除失败";

            return result;
        }


        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}