using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Web.UI.WebControls;
using BLL;
using Common;
using DAL;

namespace WebApp.Subjects.UC
{
    public partial class OrderDetailUC : System.Web.UI.UserControl
    {
        public int subjectId;
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Request.QueryString["subjectId"] != null)
            {
                subjectId = int.Parse(Request.QueryString["subjectId"]);
            }
            if (!IsPostBack)
            {
                BindSubject();

            }
        }
        void BindSubject()
        {
            var subjectModel = (from subject in CurrentContext.DbContext.Subject
                                join customer in CurrentContext.DbContext.Customer
                                on subject.CustomerId equals customer.Id
                                join user in CurrentContext.DbContext.UserInfo
                                on subject.AddUserId equals user.UserId

                                where subject.Id == subjectId
                                select new
                                {
                                    subject,
                                    customer.CustomerName,
                                    AddUserName = user.UserName
                                }).FirstOrDefault();
            if (subjectModel != null)
            {
                labSubjectNo.Text = subjectModel.subject.SubjectNo;
                labSubjectName.Text = subjectModel.subject.SubjectName;
                labOutSubjectName.Text = subjectModel.subject.OutSubjectName;
                labBeginDate.Text = subjectModel.subject.BeginDate != null ? DateTime.Parse(subjectModel.subject.BeginDate.ToString()).ToShortDateString() : "";
                labEndDate.Text = subjectModel.subject.EndDate != null ? DateTime.Parse(subjectModel.subject.EndDate.ToString()).ToShortDateString() : "";
                labAddUserName.Text = subjectModel.AddUserName;
                labCustomerName.Text = subjectModel.CustomerName;
                int subjectType = subjectModel.subject.SubjectType ?? 1;
                //labSubjectType.Text = subjectType == 1 ? "POP订单" : subjectType == 2 ? "费用订单" : "补单";
                labSubjectType.Text = CommonMethod.GeEnumName<SubjectTypeEnum>(subjectType.ToString());
                labRemark.Text = subjectModel.subject.Remark;
                hfSubjectType.Value = subjectType.ToString();
                hfPlanIds.Value = subjectModel.subject.SplitPlanIds;
                labPriceBlong.Text = !string.IsNullOrWhiteSpace(subjectModel.subject.PriceBlongRegion)?subjectModel.subject.PriceBlongRegion:"默认";

            }
        }


        void BindList()
        {

            var listOrder = (from list in CurrentContext.DbContext.ListOrderDetail
                             join shop in CurrentContext.DbContext.Shop
                             on list.ShopId equals shop.Id

                             where list.SubjectId == subjectId && (list.IsDelete == null || list.IsDelete == false)
                             select new
                             {
                                 list.LevelNum,
                                 list.Sheet,
                                 list,
                                 shop
                             }).ToList();
            string shopNo = txtListShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                listOrder = listOrder.Where(s => s.shop.ShopNo.Contains(shopNo)).ToList();
            }
            AspNetPagerList.RecordCount = listOrder.Count;
            this.AspNetPagerList.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerList.CurrentPageIndex, this.AspNetPagerList.PageCount, this.AspNetPagerList.RecordCount, this.AspNetPagerList.PageSize });
            repeater_List.DataSource = listOrder.OrderBy(s => s.list.ShopId).Skip((AspNetPagerList.CurrentPageIndex - 1) * AspNetPagerList.PageSize).Take(AspNetPagerList.PageSize).ToList();

            repeater_List.DataBind();

        }

        void BindPOP()
        {
            var popOrder = (from order in CurrentContext.DbContext.POPOrderDetail
                            join pop in CurrentContext.DbContext.POP

                            on new { order.ShopId, order.GraphicNo, order.Sheet } equals new { pop.ShopId, pop.GraphicNo, pop.Sheet }
                            join shop in CurrentContext.DbContext.Shop
                            on order.ShopId equals shop.Id

                            where order.SubjectId == subjectId && (order.IsDelete == null || order.IsDelete == false)
                            select new
                            {
                                order,

                                pop,
                                shop

                            }).ToList();
            string shopNo = txtPOPShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                popOrder = popOrder.Where(s => s.shop.ShopNo.Contains(shopNo)).ToList();
            }
            AspNetPagerPOP.RecordCount = popOrder.Count;
            this.AspNetPagerPOP.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerPOP.CurrentPageIndex, this.AspNetPagerPOP.PageCount, this.AspNetPagerPOP.RecordCount, this.AspNetPagerPOP.PageSize });
            repeater_POPList.DataSource = popOrder.OrderBy(s => s.order.ShopId).Skip((AspNetPagerPOP.CurrentPageIndex - 1) * AspNetPagerPOP.PageSize).Take(AspNetPagerPOP.PageSize).ToList();

            repeater_POPList.DataBind();

        }

        void BindSupplement()
        {


            //补充订单
            var supplementOrder = (from list in CurrentContext.DbContext.SupplementOrderDetail
                                   join shop in CurrentContext.DbContext.Shop
                                   on list.ShopId equals shop.Id

                                   where list.SubjectId == subjectId && (list.IsDelete == null || list.IsDelete == false)
                                   select new
                                   {

                                       list,
                                       shop
                                   }).ToList();
            string shopNo = txtBCShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                supplementOrder = supplementOrder.Where(s => s.shop.ShopNo.Contains(shopNo)).ToList();
            }
            AspNetPagerBC.RecordCount = supplementOrder.Count;
            this.AspNetPagerBC.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerBC.CurrentPageIndex, this.AspNetPagerBC.PageCount, this.AspNetPagerBC.RecordCount, this.AspNetPagerBC.PageSize });
            repeater_BCList.DataSource = supplementOrder.OrderBy(s => s.list.ShopId).Skip((AspNetPagerBC.CurrentPageIndex - 1) * AspNetPagerBC.PageSize).Take(AspNetPagerBC.PageSize).ToList();

            repeater_BCList.DataBind();

        }

        void BindMerge()
        {
            var MergeList = (from merge in CurrentContext.DbContext.MergeOriginalOrder
                             join pop1 in CurrentContext.DbContext.POP
                             on new { merge.GraphicNo, merge.ShopId, merge.Sheet } equals new { pop1.GraphicNo, pop1.ShopId, pop1.Sheet } into popTemp
                             join shop in CurrentContext.DbContext.Shop
                             on merge.ShopId equals shop.Id
                             from pop in popTemp.DefaultIfEmpty()
                             where merge.SubjectId == subjectId && (merge.IsDelete == null || merge.IsDelete == false)
                             select new
                             {
                                 merge.LevelNum,
                                 merge.Sheet,
                                 merge,
                                 shop,
                                 pop

                             }).ToList();
            string shopNo = txtMergeShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                MergeList = MergeList.Where(s => s.shop.ShopNo.Contains(shopNo)).ToList();
            }
            AspNetPagerMerge.RecordCount = MergeList.Count;
            this.AspNetPagerMerge.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerMerge.CurrentPageIndex, this.AspNetPagerMerge.PageCount, this.AspNetPagerMerge.RecordCount, this.AspNetPagerMerge.PageSize });
            repeater_MergeList.DataSource = MergeList.OrderBy(s => s.merge.ShopId).Skip((AspNetPagerMerge.CurrentPageIndex - 1) * AspNetPagerMerge.PageSize).Take(AspNetPagerMerge.PageSize).ToList();

            repeater_MergeList.DataBind();

        }

        void BindMaterial()
        {
            var materialList = (from material in CurrentContext.DbContext.OrderMaterial
                                join shop in CurrentContext.DbContext.Shop
                                on material.ShopId equals shop.Id
                                where material.SubjectId == subjectId
                                select new
                                {
                                    material,
                                    shop
                                }).ToList();
            string shopNo = txtMaterialShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                materialList = materialList.Where(s => s.shop.ShopNo.Contains(shopNo)).ToList();
            }
            AspNetPagerMaterial.RecordCount = materialList.Count;
            this.AspNetPagerMaterial.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerMaterial.CurrentPageIndex, this.AspNetPagerMaterial.PageCount, this.AspNetPagerMaterial.RecordCount, this.AspNetPagerMaterial.PageSize });
            repeater_Material.DataSource = materialList.OrderBy(s => s.material.ShopId).Skip((AspNetPagerMaterial.CurrentPageIndex - 1) * AspNetPagerMaterial.PageSize).Take(AspNetPagerMaterial.PageSize).ToList();

            repeater_Material.DataBind();
        }

        void BindPriceOrder()
        {
            var list = (from order in CurrentContext.DbContext.PriceOrderDetail

                        where order.SubjectId == subjectId
                        select new
                        {
                            order,

                        }).ToList();

            AspNetPagerPrice.RecordCount = list.Count;
            this.AspNetPagerPrice.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerPrice.CurrentPageIndex, this.AspNetPagerPrice.PageCount, this.AspNetPagerPrice.RecordCount, this.AspNetPagerPrice.PageSize });
            repeater_PriceList.DataSource = list.OrderBy(s => s.order.Id).Skip((AspNetPagerPrice.CurrentPageIndex - 1) * AspNetPagerPrice.PageSize).Take(AspNetPagerPrice.PageSize).ToList();
            repeater_PriceList.DataBind();

        }

        void BindPOP1List()
        {
            var list = (from order in CurrentContext.DbContext.HandMadeOrderDetail
                        join shop in CurrentContext.DbContext.Shop
                        on order.ShopId equals shop.Id
                        where order.SubjectId == subjectId
                        select new
                        {
                            order,
                            shop
                        }).ToList();
            string shopNo = txtPOP1ShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                list = list.Where(s => s.shop.ShopNo.ToLower().Contains(shopNo.ToLower())).ToList();
            }
            AspNetPagerPOP1.RecordCount = list.Count;
            this.AspNetPagerPOP1.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerPOP1.CurrentPageIndex, this.AspNetPagerPOP1.PageCount, this.AspNetPagerPOP1.RecordCount, this.AspNetPagerPOP1.PageSize });
            repeater_POP1List.DataSource = list.OrderBy(s => s.order.Id).Skip((AspNetPagerPOP1.CurrentPageIndex - 1) * AspNetPagerPOP1.PageSize).Take(AspNetPagerPOP1.PageSize).ToList();
            repeater_POP1List.DataBind();
        }

        void BindHCList()
        {
            var list = (from order in CurrentContext.DbContext.HCOrderDetail
                        //join pop in CurrentContext.DbContext.POP
                        //on new { order.ShopId, order.GraphicNo, order.Sheet } equals new { pop.ShopId, pop.GraphicNo, pop.Sheet }
                        join shop in CurrentContext.DbContext.Shop
                        on order.ShopId equals shop.Id
                        where order.SubjectId == subjectId
                        select new
                        {
                            order,
                            //pop,
                            shop
                        }).ToList();
            string shopNo = txtHCShopNo.Text.Trim();
            if (!string.IsNullOrWhiteSpace(shopNo))
            {
                list = list.Where(s => s.shop.ShopNo.ToLower().Contains(shopNo.ToLower())).ToList();
            }
            AspNetPagerHC.RecordCount = list.Count;
            this.AspNetPagerHC.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerHC.CurrentPageIndex, this.AspNetPagerHC.PageCount, this.AspNetPagerHC.RecordCount, this.AspNetPagerHC.PageSize });
            repeater_HCList.DataSource = list.OrderBy(s => s.order.ShopId).Skip((AspNetPagerHC.CurrentPageIndex - 1) * AspNetPagerHC.PageSize).Take(AspNetPagerHC.PageSize).ToList();

            repeater_HCList.DataBind();
        }

        void BindHCMaterial()
        {
            var materialList = (from material in CurrentContext.DbContext.OrderMaterial
                                join shop in CurrentContext.DbContext.Shop
                                on material.ShopId equals shop.Id
                                where material.SubjectId == subjectId
                                select new
                                {
                                    material,
                                    shop
                                }).ToList();
            //string shopNo = txtMaterialShopNo.Text.Trim();
            //if (!string.IsNullOrWhiteSpace(shopNo))
            //{
            //    materialList = materialList.Where(s => s.shop.ShopNo.Contains(shopNo)).ToList();
            //}
            AspNetPagerHCMaterial.RecordCount = materialList.Count;
            this.AspNetPagerHCMaterial.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerHCMaterial.CurrentPageIndex, this.AspNetPagerHCMaterial.PageCount, this.AspNetPagerHCMaterial.RecordCount, this.AspNetPagerHCMaterial.PageSize });
            repeater_HCmaterial.DataSource = materialList.OrderBy(s => s.material.ShopId).Skip((AspNetPagerHCMaterial.CurrentPageIndex - 1) * AspNetPagerHCMaterial.PageSize).Take(AspNetPagerHCMaterial.PageSize).ToList();

            repeater_HCmaterial.DataBind();
        }


        void BindFinalOrder()
        {


            var list = (from order in CurrentContext.DbContext.FinalOrderDetailTemp
                        join pop1 in CurrentContext.DbContext.POP
                        on new { order.ShopId, order.GraphicNo, order.Sheet } equals new { pop1.ShopId, pop1.GraphicNo, pop1.Sheet } into popTemp
                        from pop in popTemp.DefaultIfEmpty()
                        join shop in CurrentContext.DbContext.Shop
                        on order.ShopId equals shop.Id
                        where order.SubjectId == subjectId
                        && (order.IsDelete == null || order.IsDelete == false)
                        select new
                        {
                            order,
                            Sheet = order.Sheet,
                            LevelNum = order.LevelNum,
                            shop,
                            pop
                        }).ToList();

            PanelFinalOrder.Visible = list.Any();
            if (!string.IsNullOrWhiteSpace(txtShopNo.Text.Trim()))
            {
                list = list.Where(s => s.order.ShopNo.ToLower() == txtShopNo.Text.Trim().ToLower()).ToList();
            }
            if (!string.IsNullOrWhiteSpace(txtShopName.Text.Trim()))
            {
                list = list.Where(s => s.order.ShopName.Contains(txtShopNo.Text.Trim())).ToList();
            }


            AspNetPagerFinal.RecordCount = list.Count;
            this.AspNetPagerFinal.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerFinal.CurrentPageIndex, this.AspNetPagerFinal.PageCount, this.AspNetPagerFinal.RecordCount, this.AspNetPagerFinal.PageSize });
            repeater_FinalOrder.DataSource = list.OrderBy(s => s.order.ShopId).Skip((AspNetPagerFinal.CurrentPageIndex - 1) * AspNetPagerFinal.PageSize).Take(AspNetPagerFinal.PageSize).ToList();
            repeater_FinalOrder.DataBind();



        }


        void BindSISOrder()
        {
            var list = (from order in CurrentContext.DbContext.HandMadeOrderDetail
                        join shop in CurrentContext.DbContext.Shop
                        on order.ShopId equals shop.Id
                        where order.SubjectId == subjectId
                        select new
                        {
                            order,
                            shop
                        }).ToList();

            AspNetPagerSIS.RecordCount = list.Count;
            this.AspNetPagerSIS.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPagerSIS.CurrentPageIndex, this.AspNetPagerSIS.PageCount, this.AspNetPagerSIS.RecordCount, this.AspNetPagerSIS.PageSize });
            repeaterSIS.DataSource = list.OrderBy(s => s.order.Id).Skip((AspNetPagerSIS.CurrentPageIndex - 1) * AspNetPagerSIS.PageSize).Take(AspNetPagerSIS.PageSize).ToList();
            repeaterSIS.DataBind();
            PanelSISOrder.Visible = list.Any();
        }
        /// <summary>
        /// list订单查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSreachList_Click(object sender, EventArgs e)
        {
            AspNetPagerList.CurrentPageIndex = 1;
            BindList();
        }

        /// <summary>
        /// pop订单查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSreachPOP_Click(object sender, EventArgs e)
        {
            AspNetPagerPOP.CurrentPageIndex = 1;
            BindPOP();
        }

        /// <summary>
        /// 补充订单查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSreachBC_Click(object sender, EventArgs e)
        {
            AspNetPagerBC.CurrentPageIndex = 1;
            BindSupplement();
        }

        /// <summary>
        /// 合并订单查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSreachMerge_Click(object sender, EventArgs e)
        {
            AspNetPagerMerge.CurrentPageIndex = 1;
            BindMerge();
        }

        /// <summary>
        /// 搜索物料
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnSreachMaterial_Click(object sender, EventArgs e)
        {
            AspNetPagerMaterial.CurrentPageIndex = 1;
            BindMaterial();
        }

        protected void btnSreachPOP1_Click(object sender, EventArgs e)
        {
            AspNetPagerPOP1.CurrentPageIndex = 1;
            BindPOP1List();
        }

        protected void btnSreachHC_Click(object sender, EventArgs e)
        {
            AspNetPagerHC.CurrentPageIndex = 1;
            BindHCList();
        }

        protected void btnSearchFinal_Click(object sender, EventArgs e)
        {
            AspNetPagerFinal.CurrentPageIndex = 1;
            BindFinalOrder();
        }


        protected void AspNetPagerList_PageChanged(object sender, EventArgs e)
        {
            BindList();
        }
        protected void AspNetPagerPOP_PageChanged(object sender, EventArgs e)
        {
            BindPOP();
        }
        protected void AspNetPagerBC_PageChanged(object sender, EventArgs e)
        {
            BindSupplement();
        }
        protected void AspNetPagerMerge_PageChanged(object sender, EventArgs e)
        {
            BindMerge();
        }
        protected void AspNetPagerMaterial_PageChanged(object sender, EventArgs e)
        {
            BindMaterial();
        }

        protected void AspNetPagerPrice_PageChanged(object sender, EventArgs e)
        {
            BindPriceOrder();
        }

        protected void AspNetPagerPOP1_PageChanged(object sender, EventArgs e)
        {
            BindPOP1List();
        }

        protected void AspNetPagerHC_PageChanged(object sender, EventArgs e)
        {
            BindHCList();
        }

        protected void AspNetPagerHCMaterial_PageChanged(object sender, EventArgs e)
        {
            BindHCMaterial();
        }

        protected void AspNetPagerSIS_PageChanged(object sender, EventArgs e)
        {
            BindSISOrder();
        }

        protected void AspNetPagerFinal_PageChanged(object sender, EventArgs e)
        {
            BindFinalOrder();
        }

        void LoadOrders()
        {
            int subjectType = !string.IsNullOrWhiteSpace(hfSubjectType.Value) ? int.Parse(hfSubjectType.Value) : 0;
            switch (subjectType)
            {
                case (int)SubjectTypeEnum.POP订单:
                default:
                    LoadPOPOrder();
                    break;
                case (int)SubjectTypeEnum.新开店安装费:
                case (int)SubjectTypeEnum.运费:
                    LoadPriceOrder();
                    break;
                case (int)SubjectTypeEnum.手工订单:
                    LoadHC();//补单
                    break;
                //case 5:
                //    BindSISOrder();
                //    break;
            }
            //Panel1.Visible = false;
        }

        void LoadPOPOrder()
        {
            BindList();
            BindPOP();
            BindSupplement();
            BindMerge();
            BindMaterial();
            BindFinalOrder();
            PanelPOPOrder.Visible = true;
        }

        void LoadPriceOrder()
        {
            BindPriceOrder();
            PanelPriceOrder.Visible = true;
        }

        void LoadHC()
        {
            BindPOP1List();
            BindHCList();
            BindHCMaterial();
            PanelSupplementOrder.Visible = true;
        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            LoadOrders();
        }
    }
}