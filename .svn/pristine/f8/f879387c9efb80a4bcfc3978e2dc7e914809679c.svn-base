using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BLL;
using Models;
using Common;

namespace WebApp.Subjects
{
    public partial class AddSubject : BasePage
    {
        int subjectId;
        SubjectBLL subjectBll = new SubjectBLL();
        Subject subjectModel;
        int ItemId;
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Request.QueryString["subjectId"] != null)
            {
                subjectId = int.Parse(Request.QueryString["subjectId"]);
            }
            if (Request.QueryString["itemId"] != null)
            {
                ItemId = int.Parse(Request.QueryString["itemId"]);
                
            }
            if (!IsPostBack)
            {
                BindGuidanceList();
                if (ItemId > 0)
                    BindSubjectType(ItemId);
                BindMyCustomerList(ref ddlCustomer);
                ddlCustomer.SelectedIndex = 1;
                BindSubjectCategory();
                BindData();
                
            }
        }

        void BindGuidanceList()
        {
            int currYear = DateTime.Now.Year;
            int currMonth = DateTime.Now.Month;
            DateTime now = DateTime.Now;
            //var list = new SubjectGuidanceBLL().GetList(s => s.BeginDate<=now && s.EndDate>=now).OrderByDescending(s => s.ItemId).ToList();
            var list = new SubjectGuidanceBLL().GetList(s =>1==1).OrderByDescending(s => s.ItemId).ToList();
            if (ItemId == 0)
            {
                if (subjectId ==0)
                {
                    DateTime date = DateTime.Now;
                    DateTime newDate = new DateTime(date.Year, date.Month, 1);
                    DateTime beginDate = newDate.AddMonths(-1);
                    DateTime endDate = newDate.AddMonths(2);
                    list = list.Where(s => s.BeginDate >= beginDate && s.BeginDate < endDate).ToList();
                }
                
            }
            if (list.Any())
            {
                ddlGuidance.DataSource = list;
                ddlGuidance.DataTextField = "ItemName";
                ddlGuidance.DataValueField = "ItemId";
                ddlGuidance.DataBind();
                ddlGuidance.Items.Insert(0, new ListItem("请选择","0"));
                if (ItemId > 0)
                {
                    ddlGuidance.SelectedValue = ItemId.ToString();
                    ddlGuidance.Enabled = false;
                }
                if(subjectId>0)
                    ddlGuidance.Enabled = false;
            }
            
        }

        void BindSubjectType(int itemId)
        {
            
            SubjectGuidance model = new SubjectGuidanceBLL().GetModel(itemId);
            if (model != null)
            {
                if (model.BeginDate != null)
                {
                    txtBeginDate.Text = DateTime.Parse(model.BeginDate.ToString()).ToShortDateString();
                }
                if (model.EndDate != null)
                {
                    txtEndDate.Text = DateTime.Parse(model.EndDate.ToString()).ToShortDateString();
                }
                var typeList = new SubjectTypeBLL().GetList(s => s.GuidanceId == itemId && (s.IsDelete == false || s.IsDelete == null));
                if (typeList.Any())
                {
                    typeList.ForEach(s =>
                    {
                        ListItem li = new ListItem();
                        li.Value = s.Id.ToString();
                        li.Text = s.SubjectTypeName;
                        ddlSubjectType.Items.Add(li);
                    });
                }
            }
           
        }

        void BindSubjectCategory()
        {
            var List = new ADSubjectCategoryBLL().GetList(s => s.Id > 0);
            if (List.Any())
            {
                List.ForEach(s =>
                {
                    ListItem li = new ListItem();
                    li.Value = s.Id.ToString();
                    li.Text = s.CategoryName;
                    ddlSubjectCategory.Items.Add(li);
                });
            }
        }

        void BindData()
        {
            if (subjectId > 0)
            {
                labTitel.Text = "编辑项目";
                subjectModel = subjectBll.GetModel(subjectId);
                if (subjectModel != null)
                {
                    //string name = System.Web.HttpUtility.UrlDecode(subjectModel.SubjectName, System.Text.Encoding.UTF8);
                    if (subjectModel.GuidanceId != null)
                    {
                        ddlGuidance.SelectedValue = subjectModel.GuidanceId.ToString();
                        BindSubjectType(subjectModel.GuidanceId ?? 0);
                    }
                    txtSubjectName.Text = subjectModel.SubjectName;
                    txtOutName.Text = subjectModel.OutSubjectName;
                    txtBeginDate.Text = subjectModel.BeginDate != null ? DateTime.Parse(subjectModel.BeginDate.ToString()).ToShortDateString() : "";
                    txtEndDate.Text = subjectModel.EndDate != null ? DateTime.Parse(subjectModel.EndDate.ToString()).ToShortDateString() : "";
                    //txtContact.Text = subjectModel.Contact;
                    //txtTel.Text = subjectModel.Tel;
                    ddlCustomer.SelectedValue =subjectModel.CustomerId!=null? subjectModel.CustomerId.ToString():"";
                    //rblOrderType.SelectedValue = subjectModel.AddOrderType != null ? subjectModel.AddOrderType.ToString() : "";
                    txtRemark.Text = subjectModel.Remark;
                    if (subjectModel.SubjectTypeId!=null)
                       ddlSubjectType.SelectedValue = subjectModel.SubjectTypeId.ToString();
                    if (subjectModel.SubjectCategoryId != null)
                        ddlSubjectCategory.SelectedValue = subjectModel.SubjectCategoryId.ToString();
                    //if (subjectModel.IsInstall!=null)
                        //rblIsInstall.SelectedValue = subjectModel.IsInstall.ToString();
                    if (subjectModel.SubjectType != null)
                        rblSubjectType.SelectedValue = subjectModel.SubjectType.ToString();
                    
                }
            }
        }

        /// <summary>
        /// 下一步
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnNext_Click(object sender, EventArgs e)
        {
            labMsg.Text = "";
            if (CheckSubject(txtSubjectName.Text.Trim(), subjectId))
            {
                labMsg.Text = "项目名称重复";
                return;
            }
            if (subjectId > 0)
            {
                subjectModel = subjectBll.GetModel(subjectId);
            }
            else
            {
                subjectModel = new Subject();
                //subjectModel.AddOrderType = int.Parse(rblOrderType.SelectedValue);
                subjectModel.AddOrderType = 3;
                subjectModel.AddUserId = CurrentUser.UserId;
                subjectModel.AddDate = DateTime.Now;
                subjectModel.IsDelete = false;
                subjectModel.Status = 1;
                subjectModel.SubjectNo = CreateSubjectNo();
                subjectModel.CompanyId = CurrentUser.CompanyId;
                subjectModel.ApproveState = 0;
            }
            subjectModel.BeginDate = DateTime.Parse(txtBeginDate.Text.Trim());
            //subjectModel.Contact = txtContact.Text;
            subjectModel.CustomerId = int.Parse(ddlCustomer.SelectedValue);
            subjectModel.EndDate = DateTime.Parse(txtEndDate.Text.Trim());
            subjectModel.Remark = txtRemark.Text;
            //subjectModel.SubjectName = txtSubjectName.Text.Trim();
            //string pname = txtSubjectName.Text.Trim();
            //保存表情符号
            //string pname = System.Web.HttpUtility.UrlEncode(txtSubjectName.Text.Trim(), System.Text.Encoding.UTF8);
            subjectModel.SubjectName = txtSubjectName.Text.Trim();
            subjectModel.OutSubjectName = txtOutName.Text.Trim();
            //subjectModel.Tel = txtTel.Text;
            subjectModel.SubjectCategoryId = int.Parse(ddlSubjectCategory.SelectedValue);
            subjectModel.SubjectTypeId = int.Parse(ddlSubjectType.SelectedValue);
            //if (!string.IsNullOrWhiteSpace(rblIsInstall.SelectedValue))
                //subjectModel.IsInstall = int.Parse(rblIsInstall.SelectedValue);
            if (!string.IsNullOrWhiteSpace(rblSubjectType.SelectedValue))
                subjectModel.SubjectType = int.Parse(rblSubjectType.SelectedValue);
            else
                subjectModel.SubjectType = 1;//默认是pop订单
            if (subjectId > 0)
            {
                subjectBll.Update(subjectModel);
            }
            else
            {
                if (ItemId == 0)
                    ItemId = int.Parse(ddlGuidance.SelectedValue);
                subjectModel.GuidanceId = ItemId;
                subjectBll.Add(subjectModel);
            }

           
            Response.Redirect("ADOrders/ImportOrder.aspx?subjectId=" + subjectModel.Id, false);
        }

        string CreateSubjectNo()
        {
            System.Text.StringBuilder code = new System.Text.StringBuilder();
            DateTime date = DateTime.Now;
            code.Append(date.Year).Append(date.Month.ToString().PadLeft(2, '0')).Append(date.Day.ToString().PadLeft(2, '0')).Append(date.Hour.ToString().PadLeft(2, '0')).Append(date.Minute.ToString().PadLeft(2, '0')).Append(date.Second.ToString().PadLeft(2, '0'));
            return code.ToString();
        }

        /// <summary>
        /// 检查项目名称是否重复
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        bool CheckSubject(string name,int id)
        {
            int customerId = int.Parse(ddlCustomer.SelectedValue);
            //var list = subjectBll.GetList(s => StringHelper.ReplaceSpace(s.SubjectName) == StringHelper.ReplaceSpace(name) && s.CustomerId == customerId && s.CompanyId == CurrentUser.CompanyId && (id > 0 ? s.Id != id : 1 == 1));
            name=StringHelper.ReplaceSpace(name);
            var list = subjectBll.GetList(s => s.SubjectName.Replace(" ", "").ToLower() == name.ToLower() && s.CustomerId == customerId && s.CompanyId == CurrentUser.CompanyId && (id > 0 ? s.Id != id : 1 == 1) && (s.IsDelete==null || s.IsDelete==false));
            
            return list.Any();
        }

        protected void ddlGuidance_SelectedIndexChanged(object sender, EventArgs e)
        {
            int itemId = int.Parse((sender as DropDownList).SelectedValue);
            BindSubjectType(itemId);
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            labMsg.Text = "";
            if (CheckSubject(txtSubjectName.Text.Trim(), subjectId))
            {
                labMsg.Text = "项目名称重复";
                return;
            }
            if (subjectId > 0)
            {
                subjectModel = subjectBll.GetModel(subjectId);
            }
            else
            {
                subjectModel = new Subject();
                //subjectModel.AddOrderType = int.Parse(rblOrderType.SelectedValue);
                subjectModel.AddOrderType = 3;
                subjectModel.AddUserId = CurrentUser.UserId;
                subjectModel.AddDate = DateTime.Now;
                subjectModel.IsDelete = false;
                subjectModel.Status = 4;
                subjectModel.SubjectNo = CreateSubjectNo();
                subjectModel.CompanyId = CurrentUser.CompanyId;
                subjectModel.ApproveState = 1;
            }
            subjectModel.BeginDate = DateTime.Parse(txtBeginDate.Text.Trim());
            //subjectModel.Contact = txtContact.Text;
            subjectModel.CustomerId = int.Parse(ddlCustomer.SelectedValue);
            subjectModel.EndDate = DateTime.Parse(txtEndDate.Text.Trim());
            subjectModel.Remark = txtRemark.Text;
            //subjectModel.SubjectName = txtSubjectName.Text.Trim();
            //string pname = txtSubjectName.Text.Trim();
            //保存表情符号
            //string pname = System.Web.HttpUtility.UrlEncode(txtSubjectName.Text.Trim(), System.Text.Encoding.UTF8);
            subjectModel.SubjectName = txtSubjectName.Text.Trim();
            subjectModel.OutSubjectName = txtOutName.Text.Trim();
            //subjectModel.Tel = txtTel.Text;
            subjectModel.SubjectCategoryId = int.Parse(ddlSubjectCategory.SelectedValue);
            subjectModel.SubjectTypeId = int.Parse(ddlSubjectType.SelectedValue);
            //if (!string.IsNullOrWhiteSpace(rblIsInstall.SelectedValue))
            //subjectModel.IsInstall = int.Parse(rblIsInstall.SelectedValue);
            if (!string.IsNullOrWhiteSpace(rblSubjectType.SelectedValue))
                subjectModel.SubjectType = int.Parse(rblSubjectType.SelectedValue);
            else
                subjectModel.SubjectType = 1;//默认是pop订单
            if (subjectId > 0)
            {
                subjectBll.Update(subjectModel);
            }
            else
            {
                if (ItemId == 0)
                    ItemId = int.Parse(ddlGuidance.SelectedValue);
                subjectModel.GuidanceId = ItemId;
                subjectBll.Add(subjectModel);
            }
            Response.Redirect("SubjectList.aspx", false);
        }
    }
}