using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BLL;
using Models;
using DAL;
using Common;


namespace WebApp.Subjects.RegionSubject
{
    public partial class List : BasePage
    {
        public string url = string.Empty;
        protected void Page_Load(object sender, EventArgs e)
        {
            url = Request.FilePath;
            if (!IsPostBack)
            {
                BindData();
            }
        }

        void BindData()
        {
            List<int> curstomerList = new List<int>();
            List<int> companyList = MySonCompanyList.Select(s => s.Id).ToList();
            foreach (ListItem item in ddlCustomer.Items)
            {
                int id = int.Parse(item.Value);
                if (!curstomerList.Contains(id))
                    curstomerList.Add(id);
            }
            var list = (from subject in CurrentContext.DbContext.Subject
                        join customer in CurrentContext.DbContext.Customer
                        on subject.CustomerId equals customer.Id
                        join user in CurrentContext.DbContext.UserInfo
                        on subject.AddUserId equals user.UserId
                        join guidance1 in CurrentContext.DbContext.SubjectGuidance
                        on subject.GuidanceId equals guidance1.ItemId into temp1
                        from guidance in temp1.DefaultIfEmpty()
                        join subjectType1 in CurrentContext.DbContext.SubjectType
                        on subject.SubjectTypeId equals subjectType1.Id into temp2
                        from subjectType in temp2.DefaultIfEmpty()
                       
                        join subjectCategory1 in CurrentContext.DbContext.ADSubjectCategory
                        on subject.SubjectCategoryId equals subjectCategory1.Id into subjectCategoryTemp
                        from subjectCategory in subjectCategoryTemp.DefaultIfEmpty()
                        where (subject.IsDelete == null || subject.IsDelete == false) && (curstomerList.Any() ? (curstomerList.Contains(subject.CustomerId ?? 0)) : 1 == 1)
                        && (subject.SupplementRegion.Length>0)
                        select new
                        {
                            subject.Id,
                            subject.AddDate,
                            subject.AddUserId,
                            subject.ApproveState,
                            subject.ApproveUserId,
                            subject.BeginDate,
                            subject.Contact,
                            subject.EndDate,
                            subject.IsDelete,
                            subject.OutSubjectName,
                            subject.Remark,
                            subject.Status,
                            subject.SubjectName,
                            subject.SubjectNo,
                            subject.Tel,
                            subject.CustomerId,
                            customer.CustomerName,
                            user.RealName,
                            guidance.ItemName,
                            subjectType.SubjectTypeName,
                            subjectCategory.CategoryName,
                            subject.GuidanceId,
                            subject.SubjectTypeId,
                            subject.SubjectCategoryId,
                            subject.SubjectType
                        }).ToList();
            if (CurrentUser.RoleId == 5)
            {
                list = list.Where(s => s.AddUserId == CurrentUser.UserId).ToList();
            }
            //if (ddlCustomer.SelectedValue != "0")
            //{
            //    int cid = int.Parse(ddlCustomer.SelectedValue);
            //    list = list.Where(s => s.CustomerId == cid).ToList();
            //}
            //List<int> guidanceIdList = new List<int>();
            //foreach (ListItem li in cblGuidance.Items)
            //{
            //    if (li.Selected)
            //        guidanceIdList.Add(int.Parse(li.Value));
            //}
            //List<int> subjectTypeList = new List<int>();
            //foreach (ListItem li in cblSubjectType.Items)
            //{
            //    if (li.Selected)
            //        subjectTypeList.Add(int.Parse(li.Value));
            //}
            //List<int> subjectCagetgoryList = new List<int>();
            //foreach (ListItem li in cblSubjectCategory.Items)
            //{
            //    if (li.Selected)
            //        subjectCagetgoryList.Add(int.Parse(li.Value));
            //}
            //if (guidanceIdList.Any())
            //{
            //    list = list.Where(s => guidanceIdList.Contains(s.GuidanceId ?? 0)).ToList();
            //}
            //if (subjectTypeList.Any())
            //{
            //    list = list.Where(s => subjectTypeList.Contains(s.SubjectTypeId ?? 0)).ToList();
            //}
            //if (subjectCagetgoryList.Any())
            //{
            //    list = list.Where(s => subjectCagetgoryList.Contains(s.SubjectCategoryId ?? 0)).ToList();
            //}
            //if (!string.IsNullOrWhiteSpace(txtSubjectName.Text))
            //{
            //    list = list.Where(s => s.SubjectName.Contains(txtSubjectName.Text)).ToList();
            //}
            //if (!string.IsNullOrWhiteSpace(txtSubjectNo.Text))
            //{
            //    list = list.Where(s => s.SubjectNo.Contains(txtSubjectNo.Text)).ToList();
            //}
            if (!IsPostBack)
            {
                List<int> subjectTypeList_Order = list.Select(s => s.SubjectType ?? 1).Distinct().ToList();
                var subjectList = CommonMethod.GetEnumList<SubjectTypeEnum>().Where(s => subjectTypeList_Order.Contains(s.Value)).ToList();
                if (subjectList.Any())
                {
                    subjectList.ForEach(s => {
                        ListItem li = new ListItem();
                        li.Value = s.Value.ToString();
                        li.Text = s.Name + "&nbsp;";
                        cblSubjectType.Items.Add(li);
                    });

                }
            }
            List<int> subjectTypeList = new List<int>();
            foreach (ListItem li in cblSubjectType.Items)
            {
                if (li.Selected)
                    subjectTypeList.Add(int.Parse(li.Value));
            }
            if (subjectTypeList.Any())
            {
                list = list.Where(s => subjectTypeList.Contains(s.SubjectType??1)).ToList();
            }
            AspNetPager1.RecordCount = list.Count;
            this.AspNetPager1.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPager1.CurrentPageIndex, this.AspNetPager1.PageCount, this.AspNetPager1.RecordCount, this.AspNetPager1.PageSize });
            gv.DataSource = list.OrderByDescending(s => s.Id).Skip((AspNetPager1.CurrentPageIndex - 1) * AspNetPager1.PageSize).Take(AspNetPager1.PageSize).ToList();
            gv.DataBind();
            SetPromission(gv, new object[] { btnAdd });
        }

        protected void btnAdd_Click(object sender, EventArgs e)
        {
            Response.Redirect("AddSubject.aspx",false);
        }

        protected void gv_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            int id = int.Parse(e.CommandArgument.ToString());

            if (e.CommandName == "EditItem")
            {
                 Response.Redirect(string.Format("AddSubject.aspx?subjectId={0}", id), false);

            }
            if (e.CommandName == "Check")
            {
                string url = string.Format("CheckOrderDetail.aspx?subjectId={0}", id);
                //var model = new SubjectBLL().GetModel(id);
                //if (model!=null && (model.SubjectType??1) == (int)SubjectTypeEnum.分区补单)
                //    url = string.Format("/Subjects/SupplementByRegion/CheckDetail.aspx?subjectId={0}", id);
                Response.Redirect(url, false);
            }
            if (e.CommandName == "DeleteItem")
            {
                SubjectBLL subjectBll = new SubjectBLL();
                Models.Subject model = subjectBll.GetModel(id);
                if (model != null)
                {
                    model.IsDelete = true;
                    subjectBll.Update(model);
                    BindData();
                }
            }
           
        }

        protected void gv_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowIndex != -1)
            { 
               object item = e.Row.DataItem;
               if (item != null)
               {
                   object subjectTypeObj = item.GetType().GetProperty("SubjectType").GetValue(item, null);
                   int subjectType = subjectTypeObj != null ? int.Parse(subjectTypeObj.ToString()) : 1;
                   object statusObj = item.GetType().GetProperty("Status").GetValue(item, null);
                   int status = statusObj != null ? int.Parse(statusObj.ToString()) : 0;
                   Label labSubjectType = (Label)e.Row.FindControl("labSubjectType");
                   //labSubjectType.Text = subjectType == 1 ? "POP订单" : subjectType == 2 ? "费用订单" : subjectType == 3?"补单":subjectType == 4?"二次安装费":"";
                   labSubjectType.Text = CommonMethod.GeEnumName<SubjectTypeEnum>(subjectType.ToString());
                   Label labStatus = (Label)e.Row.FindControl("labStatus");

                   LinkButton lbEdit = (LinkButton)e.Row.FindControl("lbEdit");


                   

                   string statusMsg = string.Empty;
                   switch (status)
                   {
                       case 1:
                           statusMsg = "<span style='color:red;'>待下单</span>";
                           
                           break;
                       case 2:
                           statusMsg = "<span style='color:blue;'>待拆单</span>";
                           
                           break;
                       case 3:
                           statusMsg = "<span style='color:red;'>待提交</span>";
                          
                           break;
                       case 4:
                           statusMsg = "<span style='color:green;'>提交完成</span>";

                           break;
                   }
                   labStatus.Text = statusMsg;

                   object approveObj = item.GetType().GetProperty("ApproveState").GetValue(item, null);
                   int approve = approveObj != null ? int.Parse(approveObj.ToString()) : 0;

                   Label labApprove = (Label)e.Row.FindControl("labApprove");
                   LinkButton lbDelete = (LinkButton)e.Row.FindControl("lbDelete");
                  
                   lbEdit.CommandName = "EditItem";
                   lbEdit.Enabled = true;
                   lbEdit.Style.Add("color", "blue");

                   string approveMsg = string.Empty;
                   switch (approve)
                   {
                       case 0:
                           approveMsg = "<span style='color:blue;'>待审批</span>";
                           if (status < 4)
                           {
                               approveMsg = "--";
                           }
                           
                           break;
                       case 1:
                           approveMsg = "<span style='color:green;'>审批通过</span>";
                          
                           break;
                       case 2:
                           approveMsg = "<span style='color:red;'>审批不通过</span>";
                           //lbDelete.Attributes.Add("OnClick", "return confirm('确定删除吗？')");

                           break;
                       default:
                           approveMsg = "--";
                           break;
                   }
                  
                   labApprove.Text = approveMsg;
 
               }
            }
        }

        protected void AspNetPager1_PageChanged(object sender, EventArgs e)
        {
            BindData();
        }

        protected void btnSearch_Click(object sender, EventArgs e)
        {
            BindData();
        }
    }
}