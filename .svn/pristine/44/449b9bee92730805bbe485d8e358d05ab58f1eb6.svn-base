using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BLL;
using DAL;
using Models;

namespace WebApp.Subjects
{
    public partial class GuidanceList : BasePage
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindCustomerList(ref ddlCustomer);
                BindData();
            }
        }

        void BindData()
        {
            List<int> curstomerList = new List<int>();
            foreach (ListItem item in ddlCustomer.Items)
            {
                int id = int.Parse(item.Value);
                if (!curstomerList.Contains(id))
                    curstomerList.Add(id);
            }
            
            var list = (from item in CurrentContext.DbContext.SubjectGuidance
                       join user1 in CurrentContext.DbContext.UserInfo
                       on item.AddUserId equals user1.UserId into userTemp
                       join activityType1 in CurrentContext.DbContext.ADOrderActivity
                       on item.ActivityTypeId equals activityType1.ActivityId into activityTypeTemp
                       from user in userTemp.DefaultIfEmpty()
                       from activityType in activityTypeTemp.DefaultIfEmpty()
                       where curstomerList.Any() ? (curstomerList.Contains(item.CustomerId ?? 0)) : 1 == 1
                       && (item.IsDelete == null || item.IsDelete==false)
                       select new {
                           item.ItemId,
                           item.CustomerId,
                           item.BeginDate,
                           item.AddDate,
                           item.AddUserId,
                           item.ItemName,
                           item.Remark,
                           item.SubjectNames,
                           item.EndDate,
                           AddUserName=user.RealName,
                           activityType.ActivityName,
                           item.ActivityTypeId,
                           item.IsFinish
                       }).ToList();
            if (ddlCustomer.SelectedValue != "0")
            {
                int cid = int.Parse(ddlCustomer.SelectedValue);
                list = list.Where(s => s.CustomerId == cid).ToList();
            }
            if (!string.IsNullOrWhiteSpace(txtGuidanceName.Text.Trim()))
            {
                list = list.Where(s => s.ItemName.Contains(txtGuidanceName.Text.Trim())).ToList();
            }
            AspNetPager1.RecordCount = list.Count;
            this.AspNetPager1.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPager1.CurrentPageIndex, this.AspNetPager1.PageCount, this.AspNetPager1.RecordCount, this.AspNetPager1.PageSize });
            gv.DataSource = list.OrderByDescending(s => s.ItemId).Skip((AspNetPager1.CurrentPageIndex - 1) * AspNetPager1.PageSize).Take(AspNetPager1.PageSize).ToList();
            gv.DataBind();
            SetPromission(gv);
            
        }

        protected void btnSearch_Click(object sender, EventArgs e)
        {
            AspNetPager1.CurrentPageIndex = 1;
            BindData();
        }

        protected void AspNetPager1_PageChanged(object sender, EventArgs e)
        {
            BindData();
        }

        protected void gv_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            int itemId = int.Parse(e.CommandArgument.ToString());
            if (e.CommandName == "Check")
            {
                Response.Redirect("GuidanceDetail.aspx?itemId="+itemId,false);
            }
            if (e.CommandName == "EditOrder")
            {
                Response.Redirect("AddGuidance.aspx?itemId=" + itemId, false);
            }
            if (e.CommandName == "DeleteItem")
            {
                SubjectGuidanceBLL bll = new SubjectGuidanceBLL();
                SubjectGuidance model = bll.GetModel(itemId);
                if (model != null)
                {
                    model.IsDelete = true;
                    model.DeleteDate = DateTime.Now;
                    model.DeleteUserId = CurrentUser.UserId;
                    bll.Update(model);
                    BindData();
                }
            }
          
        }

        protected void gv_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowIndex != -1)
            {
                object item = e.Row.DataItem;
                if (item != null)
                {
                    object IdObj = item.GetType().GetProperty("ItemId").GetValue(item, null);
                    int Id = IdObj != null ? int.Parse(IdObj.ToString()) :0;

                    object typeIdObj = item.GetType().GetProperty("ActivityTypeId").GetValue(item, null);
                    int typeId = typeIdObj != null ? int.Parse(typeIdObj.ToString()) : 1;
                    Label labInstallPrice = (Label)e.Row.FindControl("labInstallPrice");
                    if (typeId == 1)
                    {
                        //安装
                        labInstallPrice.Text = "<span  id='InstallPrice'  data-itemid='" + Id + "' name='spanInstallPrice' style=' color:Blue; cursor:pointer;'>查看</span>";
                    }
                    else
                    {
                        labInstallPrice.Text = "查看";
                    }

                    object IsFinishObj = item.GetType().GetProperty("IsFinish").GetValue(item, null);
                    bool IsFinish = IsFinishObj != null ? bool.Parse(IsFinishObj.ToString()) : false;
                    Label labStatus = (Label)e.Row.FindControl("labStatus");
                    if (IsFinish)
                    {
                        labStatus.Text = "已完成";
                        
                    }
                    else
                    {
                        labStatus.Text = "进行中";
                        labStatus.Style.Add("color","red");
                    }
                }
            }
        }
    }
}