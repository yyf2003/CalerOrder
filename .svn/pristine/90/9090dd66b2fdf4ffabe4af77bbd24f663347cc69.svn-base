using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using BLL;
using DAL;
using Models;
using Newtonsoft.Json;
using System.Transactions;
using Common;

namespace WebApp.Users.Handler
{
    /// <summary>
    /// Handler1 的摘要说明
    /// </summary>
    public class Handler1 : IHttpHandler
    {

        UserBLL user = new UserBLL();
        string type = string.Empty;
        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentType = "text/plain";
            string result = string.Empty;
            if (context.Request["type"] != null)
            {
                type = context.Request["type"];
            }
            switch (type)
            {
                case "getCompany":
                    result = GetCompanyList();
                    break;
                case "getCustomer":
                    result = GetCustomerList();
                    break;
                case "edit":
                    string jsonString = context.Request["jsonString"];
                    string optype = context.Request["optype"];
                    result = AddUser(jsonString, optype);
                    break;
                case "getRegion":
                    int customerId=int.Parse(context.Request.QueryString["customerId"].ToString());
                    result=GetRegions(customerId); 
                    break;
                case "getProvince":
                    if (context.Request.QueryString["regionId"] != null)
                    {
                        string regionIds = context.Request.QueryString["regionId"].ToString();
                        result = GetProvince(regionIds);
                    }
                    else
                        result = GetProvince();
                    break;
                case "getPlace":
                    string parentIds = context.Request.QueryString["parentId"].ToString();
                    result = GetPlace(parentIds); 
                    break;
                case "getUserLevel":
                    result = GetUserLevel();
                    break;
                case "getModel":
                    int userId = int.Parse(context.Request.QueryString["userId"]);
                    result = GetModel(userId);
                    break;
            }
            context.Response.Write(result);
        }
        StringBuilder companyJson = new StringBuilder();
        string GetCompanyList()
        {
            var list = new CompanyBLL().GetList(s => 1 == 1);
            if (list.Any())
            {
                var parentList = list.Where(s => s.ParentId == 0);
                if (parentList.Any())
                {
                    parentList.ToList().ForEach(s =>
                    {
                        companyJson.Append("{\"id\":\"" + s.Id + "\",\"text\":\"" + s.CompanyName + "\",\"ParentId\":\"" + s.ParentId + "\"");
                        GetChildren(list, s.Id);
                        companyJson.Append("},");
                    });
                }
            }
            return "[" + companyJson.ToString().TrimEnd(',') + "]";
        }

        void GetChildren(IEnumerable<Company> list, int parentId)
        {
            var list1 = list.Where(s => s.ParentId == parentId).ToList();
            if (list1.Any())
            {
                companyJson.Append(" ,\"state\":\"closed\",\"children\":[");
                int index = 0;
                list1.ForEach(s =>
                {
                    if (index > 0)
                    {
                        companyJson.Append(",");
                    }
                    companyJson.Append("{\"id\":\"" + s.Id + "\",\"text\":\"" + s.CompanyName + "\",\"ParentId\":\"" + s.ParentId + "\"");
                    GetChildren(list, s.Id);
                    companyJson.Append("}");
                    index++;
                });
                companyJson.Append("]");
            }
        }

        string GetCustomerList()
        {
            StringBuilder customerJson = new StringBuilder();
            var list = new CustomerBLL().GetList(s => s.IsDelete == false || s.IsDelete == null);
            if (list.Any())
            {
                list.ForEach(s =>
                {
                    customerJson.Append("{\"CustomerId\":\"" + s.Id + "\",\"CustomerName\":\"" + s.CustomerName + "\"},");
                });
                return "[" + customerJson.ToString().TrimEnd(',') + "]";
            }
            else
                return "";
        }

        string GetUserLevel()
        {
            var list = new UserLevelBLL().GetList(s=>s.LevelId>0);
            if (list.Any())
            {
                StringBuilder json = new StringBuilder();
                list.ForEach(s =>
                {
                    json.Append("{\"LevelId\":\"" + s.LevelId + "\",\"LevelName\":\"" + s.LevelName + "\"},");
                });
                return "[" + json.ToString().TrimEnd(',') + "]";
            }
            return "";
        }

        string AddUser(string jsonString, string optype)
        {
            string result = "提交失败！";
            if (!string.IsNullOrEmpty(jsonString))
            {
                using (TransactionScope tran = new TransactionScope())
                {
                    try
                    {
                        UserInfo model = JsonConvert.DeserializeObject<UserInfo>(jsonString);
                        UserInRoleBLL urBll = new UserInRoleBLL();
                        UserInRole urModel;
                        UserInCustomerBLL ucBll = new UserInCustomerBLL();
                        UserInCustomer ucModel;
                        UserInRegionBLL userRegionBll = new UserInRegionBLL();
                        UserInRegion userRegionModel;
                        if (model != null)
                        {
                            if (optype == "add")
                            {
                                if (!CheckUserName(model.UserName, 0))
                                {
                                    string roles = model.Roles;
                                    string customers = model.Customers;
                                    string regions = model.Regions;
                                    model.AddDate = DateTime.Now;
                                    model.PassWord = "1";
                                    user.Add(model);
                                    if (!string.IsNullOrEmpty(roles))
                                    {
                                        string[] rolesArr = roles.Split(',');
                                        foreach (string s in rolesArr)
                                        {
                                            if (!string.IsNullOrEmpty(s))
                                            {
                                                urModel = new UserInRole();
                                                urModel.RoleId = int.Parse(s);
                                                urModel.UserId = model.UserId;
                                                urBll.Add(urModel);
                                                if (!string.IsNullOrEmpty(regions))
                                                {
                                                    string[] regionsArr = regions.Split('|');
                                                    userRegionModel = new UserInRegion();
                                                    userRegionModel.RegionId = regionsArr[0];
                                                    userRegionModel.ProvinceId = regionsArr[1];
                                                    userRegionModel.CityId = regionsArr[2];
                                                    userRegionModel.AreaId = regionsArr[3];
                                                    userRegionModel.UserId = model.UserId;
                                                    userRegionModel.RoleId = int.Parse(s);
                                                    userRegionBll.Add(userRegionModel);
                                                }
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(customers))
                                    {
                                        string[] customersArr = customers.Split(',');
                                        foreach (string s in customersArr)
                                        {
                                            if (!string.IsNullOrEmpty(s))
                                            {
                                                ucModel = new UserInCustomer();
                                                ucModel.CustomerId = int.Parse(s);
                                                ucModel.UserId = model.UserId;
                                                ucBll.Add(ucModel);
                                            }
                                        }
                                    }
                                    
                                    result = "ok";
                                }
                                else
                                    result = "exist";
                            }
                            else
                            {
                                if (!CheckUserName(model.UserName, model.UserId))
                                {
                                    UserInfo um = user.GetModel(model.UserId);
                                    if (um != null)
                                    {
                                        um.UserName = model.UserName;
                                        um.RealName = model.RealName;
                                        um.CompanyId = model.CompanyId;
                                        um.UserLevelId = model.UserLevelId;
                                        user.Update(um);
                                        urBll.Delete(s => s.UserId == model.UserId);
                                        ucBll.Delete(s => s.UserId == model.UserId);
                                        userRegionBll.Delete(s=>s.UserId==model.UserId);
                                        string roles = model.Roles;
                                        if (!string.IsNullOrEmpty(roles))
                                        {
                                            string[] rolesArr = roles.Split(',');
                                            foreach (string s in rolesArr)
                                            {
                                                if (!string.IsNullOrEmpty(s))
                                                {
                                                    urModel = new UserInRole();
                                                    urModel.RoleId = int.Parse(s);
                                                    urModel.UserId = model.UserId;
                                                    urBll.Add(urModel);
                                                    string regions = model.Regions;
                                                    if (!string.IsNullOrEmpty(regions))
                                                    {
                                                        string[] regionsArr = regions.Split('|');
                                                        userRegionModel = new UserInRegion();
                                                        userRegionModel.RegionId = regionsArr[0];
                                                        userRegionModel.ProvinceId = regionsArr[1];
                                                        userRegionModel.CityId = regionsArr[2];
                                                        userRegionModel.AreaId = regionsArr[3];
                                                        userRegionModel.UserId = model.UserId;
                                                        userRegionModel.RoleId = int.Parse(s);
                                                        userRegionBll.Add(userRegionModel);
                                                    }
                                                }
                                            }
                                        }
                                        string customers = model.Customers;
                                        if (!string.IsNullOrEmpty(customers))
                                        {
                                            string[] customersArr = customers.Split(',');
                                            foreach (string s in customersArr)
                                            {
                                                if (!string.IsNullOrEmpty(s))
                                                {
                                                    ucModel = new UserInCustomer();
                                                    ucModel.CustomerId = int.Parse(s);
                                                    ucModel.UserId = model.UserId;
                                                    ucBll.Add(ucModel);
                                                }
                                            }
                                        }
                                       
                                       
                                        result = "ok";
                                    }


                                }
                                else
                                    result = "exist";

                            }


                        }
                        tran.Complete();
                        return result;
                    }
                    catch (Exception ex)
                    {
                        return result + "错误信息：" + ex.Message;
                    }
                }


            }
            return result;
        }

        bool CheckUserName(string userName, int userId)
        {

            var list = user.GetList(s => s.UserName == userName && (userId > 0 ? s.UserId != userId : 1 == 1));
            return list.Any();
        }

        string GetRegions(int customerId) 
        {
            var list = new RegionBLL().GetList(s=>s.CustomerId==customerId).OrderBy(s=>s.Id).ToList();
            if (list.Any())
            {
                StringBuilder json = new StringBuilder();
                list.ForEach(s => {
                    json.Append("{\"Id\":\"" + s.Id + "\",\"RegionName\":\""+s.RegionName+"\"},");
                });
                return "["+json.ToString().TrimEnd(',')+"]";
            }
            return "";
        }

        string GetProvince(string regionIds)
        {
            if (!string.IsNullOrWhiteSpace(regionIds))
            {
                List<int> regionIdList = StringHelper.ToIntList(regionIds,',');
                var list = (from pr in CurrentContext.DbContext.ProvinceInRegion
                            join region in CurrentContext.DbContext.Region
                            on pr.RegionId equals region.Id
                            join province in CurrentContext.DbContext.Place
                            on pr.ProvinceId equals province.ID
                            where regionIdList.Contains(pr.RegionId??0)
                            select new
                            {
                                province,
                                region
                            }).OrderBy(s => s.region.Id).ToList();
                if (list.Any())
                {
                    StringBuilder json = new StringBuilder();
                    list.ForEach(s =>
                    {
                        json.Append("{\"RegionId\":\""+s.region.Id+"\",\"RegionName\":\""+s.region.RegionName+"\",\"ProvinceId\":\"" + s.province.ID + "\",\"ProvinceName\":\"" + s.province.PlaceName + "\"},");

                    });
                    return "[" + json.ToString().TrimEnd(',') + "]";
                }
                return "";
            }
            return "";
        }

        string GetProvince()
        {
            var list = new PlaceBLL().GetList(s=>s.ParentID==0);
            if (list.Any())
            {
                StringBuilder json = new StringBuilder();
                list.ForEach(s =>
                {
                    json.Append("{\"ProvinceId\":\"" + s.ID + "\",\"ProvinceName\":\"" + s.PlaceName + "\"},");

                });
                return "[" + json.ToString().TrimEnd(',') + "]";
            }
            return "";
        }

        string GetPlace(string parentIds)
        {
            if (!string.IsNullOrWhiteSpace(parentIds))
            {
                List<int> parentIdList = StringHelper.ToIntList(parentIds, ',');
                //var list = new PlaceBLL().GetList(s => parentIdList.Contains(s.ParentID ?? 0)).OrderBy(s=>s.ParentID).ToList();
                var list = (from place in CurrentContext.DbContext.Place
                           join parent in CurrentContext.DbContext.Place
                           on place.ParentID equals parent.ID
                           where parentIdList.Contains(place.ParentID ?? 0)
                           select new { 
                              place.ParentID,
                              ParentName=parent.PlaceName,
                              place.ID,
                              place.PlaceName
                           }).OrderBy(s => s.ParentID).ToList();
                if (list.Any())
                {
                    StringBuilder json = new StringBuilder();
                    list.ForEach(s =>
                    {
                        json.Append("{\"ParentId\":\""+s.ParentID+"\",\"ParentName\":\""+s.ParentName+"\",\"PlaceId\":\"" + s.ID + "\",\"PlaceName\":\"" + s.PlaceName + "\"},");

                    });
                    return "[" + json.ToString().TrimEnd(',') + "]";
                }
                return "";
            
            }
            return "";
        }

        string GetModel(int userId)
        {
            var model = user.GetModel(userId);
            if (model != null)
            {
                StringBuilder json = new StringBuilder();
                StringBuilder Roles = new StringBuilder();
                StringBuilder Customers = new StringBuilder();
                StringBuilder Regions = new StringBuilder();
                var uRoleList = new UserInRoleBLL().GetList(s=>s.UserId==userId);
                uRoleList.ForEach(s => {
                    Roles.Append(s.RoleId+",");
                });
                var uCustomerList = new UserInCustomerBLL().GetList(s => s.UserId == userId);
                uCustomerList.ForEach(s =>
                {
                    Customers.Append(s.CustomerId + ",");
                });
                var uRegion = new UserInRegionBLL().GetList(s => s.UserId == userId).FirstOrDefault();
                if (uRegion != null)
                {
                    Regions.Append(uRegion.RegionId + "|" + uRegion.ProvinceId + "|" + uRegion.CityId + "|" + uRegion.AreaId);
                }
                //uRegionList.ForEach(s =>
                //{
                //    Regions.Append(s.RegionId + ",");
                //});
                json.Append("{\"UserId\":\"" + model.UserId + "\",\"CompanyId\":\"" + model.CompanyId + "\",\"UserName\":\"" + model.UserName + "\",\"RealName\":\"" + model.RealName + "\",\"UserLevelId\":\"" + model.UserLevelId + "\",\"Roles\":\"" + Roles.ToString().TrimEnd(',') + "\",\"Customers\":\"" + Customers.ToString().TrimEnd(',') + "\",\"Regions\":\"" + Regions.ToString() + "\"}");
                return "["+json.ToString()+"]";
            }
            return "";
        }



        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}