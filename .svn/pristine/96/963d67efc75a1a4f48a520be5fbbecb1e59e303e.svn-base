using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Data;
using System.Data.OleDb;
using System.Web.UI.WebControls;
using BLL;
using Common;
using DAL;
using Models;
using System.Configuration;
using System.Text;
using System.Transactions;

namespace WebApp.Subjects.SupplementByRegion
{
    public partial class ImportOrder : BasePage
    {
        int subjectId;
        SubjectBLL subjectBll = new SubjectBLL();
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Request.QueryString["subjectId"] != null)
            {
                subjectId = int.Parse(Request.QueryString["subjectId"]);
            }
            if (Request.QueryString["import"] != null)
            {
                
                Panel1.Visible = true;
                if (Session["errorTb"] != null)
                {
                    labState.Text = "部分数据导入失败！";
                    ExportFailMsg.Style.Add("display", "block");
                }
            }
            if (!IsPostBack)
            {
                Subject model = subjectBll.GetModel(subjectId);
                if (model != null)
                {
                    int customerId=model.CustomerId??0;
                    hfCustomerId.Value = customerId.ToString();
                }
                BindOrder();
            }
        }


        /// <summary>
        /// 模板下载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void lbDownLoad_Click(object sender, EventArgs e)
        {
            string path = ConfigurationManager.AppSettings["ImportTemplate"].ToString();
            string fileName = "RegionSupplementTemplate";
            path = path.Replace("fileName", fileName);
            OperateFile.DownLoadFile(path);
        }

        protected void lbExportError_Click(object sender, EventArgs e)
        {
            if (Session["errorTb"] != null)
            {
                DataTable dt = (DataTable)Session["errorTb"];
                OperateFile.ExportExcel(dt, "导入失败信息");
            }
        }

        /// <summary>
        /// 导入
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnImport_Click(object sender, EventArgs e)
        {
            if (FileUpload1.HasFile)
            {
                //RegionSupplementDetailBLL detailBll = new RegionSupplementDetailBLL();
                RegionOrderDetailBLL detailBll = new RegionOrderDetailBLL();
                string path = OperateFile.UpLoadFile(FileUpload1.PostedFile);
                if (path != "")
                {
                    if (!cbAdd.Checked)
                    {
                        detailBll.Delete(s => s.SubjectId == subjectId);
                        Subject model = subjectBll.GetModel(subjectId);
                        if (model != null)
                        {
                            model.Status = 1;
                            subjectBll.Update(model);
                        }
                    }
                    OleDbConnection conn;
                    OleDbDataAdapter da;
                    DataSet ds = null;
                    path = Server.MapPath(path);
                    string ExcelConnStr = ConfigurationManager.ConnectionStrings["ExcelFilePath"].ToString();
                    ExcelConnStr = ExcelConnStr.Replace("ExcelPath", path);
                    conn = new OleDbConnection(ExcelConnStr);
                    conn.Open();
                    string sql = "select * from [Sheet1$]";
                    da = new OleDbDataAdapter(sql, conn);
                    ds = new DataSet();
                    da.Fill(ds);
                    da.Dispose();
                    int successNum = 0;
                    if (ds != null && ds.Tables[0].Rows.Count > 0)
                    {
                        
                        //RegionSupplementDetail detailModel;
                        RegionOrderDetail detailModel;
                        DataColumnCollection cols = ds.Tables[0].Columns;
                        DataTable ErrorTB = CommonMethod.CreateErrorTB(cols);
                        int shopId = 0;
                        //项目名称
                        string subjectName = string.Empty;
                        //店铺编号
                        string shopNo = string.Empty;
                        //系列/选图
                        string chooseImg = string.Empty;
                        //性别
                        string gender = string.Empty;
                        //string category = string.Empty;

                        //string levelNum = string.Empty;
                        //pop位置
                        string sheet = string.Empty;
                        //器架名称
                        string machineFrame = string.Empty;
                        //数量
                        string num = string.Empty;
                        //pop材质
                        string material = string.Empty;
                        //pop宽
                        string width = string.Empty;
                        //pop高
                        string length = string.Empty;
                        //POP位置明细
                        string positionDescription = string.Empty;
                        //店铺大小
                        string posScale = string.Empty;
                        //店铺级别
                        string materialSupport = string.Empty;
                        //安装位置描述
                        string installPositionDescription = string.Empty;
                        //其他备注
                        string remark = string.Empty;
                        foreach (DataRow dr in ds.Tables[0].Rows)
                        {
                            StringBuilder msg = new StringBuilder();

                            if (cols.Contains("项目名称"))
                                subjectName = dr["项目名称"].ToString().Trim();
                            else if (cols.Contains("项目"))
                                subjectName = dr["项目"].ToString().Trim();
                            if (cols.Contains("店铺编号"))
                                shopNo = dr["店铺编号"].ToString().Trim();
                            else if (cols.Contains("POSCode"))
                                shopNo = dr["POSCode"].ToString().Trim();
                            else if (cols.Contains("POS Code"))
                                shopNo = dr["POS Code"].ToString().Trim();


                            if (cols.Contains("POP位置"))
                                sheet = dr["POP位置"].ToString().Trim();
                            else if (cols.Contains("位置"))
                                sheet = dr["位置"].ToString().Trim();
                            else if (cols.Contains("Sheet"))
                                sheet = dr["Sheet"].ToString().Trim();

                            if (cols.Contains("器架名称"))
                                machineFrame = dr["器架名称"].ToString().Trim();
                            else if (cols.Contains("器架"))
                                machineFrame = dr["器架"].ToString().Trim();


                            //if (cols.Contains("级别"))
                            //    levelNum = dr["级别"].ToString().Trim();
                            if (cols.Contains("M/W"))
                                gender = dr["M/W"].ToString().Trim();
                            else if (cols.Contains("Gender"))
                                gender = dr["Gender"].ToString().Trim();
                            else if (cols.Contains("性别"))
                                gender = dr["性别"].ToString().Trim();
                            else if (cols.Contains("男女"))
                                gender = dr["男女"].ToString().Trim();
                            else if (cols.Contains("男/女"))
                                gender = dr["男/女"].ToString().Trim();

                            if (cols.Contains("POP数量"))
                                num = dr["POP数量"].ToString().Trim();
                            else if (cols.Contains("数量"))
                                num = dr["数量"].ToString().Trim();
                            else if (cols.Contains("Quantity"))
                                num = dr["Quantity"].ToString().Trim();

                            if (cols.Contains("POP宽"))
                                width = dr["POP宽"].ToString().Trim();
                            else if (cols.Contains("宽"))
                                width = dr["宽"].ToString().Trim();

                            if (cols.Contains("POP高"))
                                length = dr["POP高"].ToString().Trim();
                            else if (cols.Contains("高"))
                                length = dr["高"].ToString().Trim();

                            if (cols.Contains("POP材质"))
                                material = dr["POP材质"].ToString().Trim();
                            else if (cols.Contains("材质"))
                                material = dr["材质"].ToString().Trim();

                            if (cols.Contains("选图"))
                                chooseImg = dr["选图"].ToString().Trim();
                            else if (cols.Contains("系列/选图"))
                                chooseImg = dr["系列/选图"].ToString().Trim();

                            if (cols.Contains("POP位置明细"))
                                positionDescription = dr["POP位置明细"].ToString().Trim();
                            else if (cols.Contains("pop位置明细"))
                                positionDescription = dr["pop位置明细"].ToString().Trim();
                            else if (cols.Contains("位置明细"))
                                positionDescription = dr["位置明细"].ToString().Trim();
                            else if (cols.Contains("位置描述"))
                                positionDescription = dr["位置描述"].ToString().Trim();

                            if (cols.Contains("备注"))
                                remark = dr["备注"].ToString().Trim();
                            else if (cols.Contains("其他备注"))
                                remark = dr["其他备注"].ToString().Trim();

                            if (cols.Contains("物料支持"))
                                materialSupport = dr["物料支持"].ToString().Trim();
                            else if (cols.Contains("物料支持级别"))
                                materialSupport = dr["物料支持级别"].ToString().Trim();
                            else if (cols.Contains("店铺级别"))
                                materialSupport = dr["店铺级别"].ToString().Trim();

                            if (cols.Contains("店铺规模大小"))
                                posScale = dr["店铺规模大小"].ToString().Trim();
                            else if (cols.Contains("店铺规模"))
                                posScale = dr["店铺规模"].ToString().Trim();
                            else if (cols.Contains("店铺大小"))
                                posScale = dr["店铺大小"].ToString().Trim();

                            if (cols.Contains("安装位置描述"))
                                installPositionDescription = dr["安装位置描述"].ToString().Trim();
                            
                            bool canSave = true;
                            int supplementSubjectId = 0;
                            if (string.IsNullOrWhiteSpace(subjectName))
                            {
                                canSave = false;
                                msg.Append("项目名称 为空；");
                            }
                            else if (!CheckSubject(subjectName, out supplementSubjectId))
                            {
                                canSave = false;
                                msg.Append("项目名称填写不正确；");
                            }
                            if (string.IsNullOrWhiteSpace(shopNo))
                            {
                                canSave = false;
                                msg.Append("店铺编号 为空；");
                            }
                            if (!string.IsNullOrWhiteSpace(shopNo) && !CheckShop(shopNo,out shopId))
                            {
                                canSave = false;
                                msg.Append("店铺不存在");

                            }
                            if (string.IsNullOrWhiteSpace(materialSupport))
                            {
                                //canSave = false;
                                //msg.Append("店铺级别 为空；");
                            }
                            if (string.IsNullOrWhiteSpace(sheet))
                            {
                                canSave = false;
                                msg.Append("位置 为空；");
                            }
                           
                            sheet = sheet == "户外" ? "OOH" : sheet;
                            
                            //if (!string.IsNullOrWhiteSpace(levelNum) && !StringHelper.IsIntVal(levelNum))
                            //{
                            //    canSave = false;
                            //    msg.Append("级别填写不正确；");
                            //}

                            if (!string.IsNullOrWhiteSpace(machineFrame))
                            {
                                if (!CheckShopMachineFrame(shopId, sheet, machineFrame))
                                {
                                    canSave = false;
                                    msg.Append("此店铺不含该器架；");
                                }
                            }

                            if (string.IsNullOrWhiteSpace(gender))
                            {
                                canSave = false;
                                msg.Append("性别 为空；");
                            }
                            if (string.IsNullOrWhiteSpace(num))
                            {
                                canSave = false;
                                msg.Append("数量 为空；");
                            }
                            else if (!StringHelper.IsIntVal(num))
                            {
                                canSave = false;
                                msg.Append("数量填写不正确；");
                            }
                            if (string.IsNullOrWhiteSpace(width))
                            {
                                canSave = false;
                                msg.Append("POP宽不能空；");
                            }
                            else if (!StringHelper.IsDecimalVal(width))
                            {
                                canSave = false;
                                msg.Append("POP宽填写不正确；");
                            }
                            else if (StringHelper.IsDecimal(width) == 0)
                            {
                                canSave = false;
                                msg.Append("POP宽必须大于0；");
                            }
                            if (string.IsNullOrWhiteSpace(length))
                            {
                                canSave = false;
                                msg.Append("POP高不能空；");
                            }
                            else if (!StringHelper.IsDecimalVal(length))
                            {
                                canSave = false;
                                msg.Append("POP高填写不正确；");
                            }
                            else if (StringHelper.IsDecimal(length) == 0)
                            {
                                canSave = false;
                                msg.Append("POP高必须大于0；");
                            }
                            //if (!string.IsNullOrWhiteSpace(width) && !StringHelper.IsDecimalVal(width))
                            //{
                            //    canSave = false;
                            //    msg.Append("POP宽填写不正确；");
                            //}
                            //if (!string.IsNullOrWhiteSpace(length) && !StringHelper.IsDecimalVal(length))
                            //{
                            //    canSave = false;
                            //    msg.Append("POP高填写不正确；");
                            //}
                            decimal materialPrice = 0;
                            if (string.IsNullOrWhiteSpace(material))
                            {
                                canSave = false;
                                msg.Append("材质 为空；");
                            }
                            else if (!CheckMaterial(material, out materialPrice))
                            {
                                canSave = false;
                                msg.Append("材质不存在；");
                            }

                            
                            if (canSave)
                            {

                                //detailModel = new RegionSupplementDetail();
                                detailModel = new RegionOrderDetail();
                                decimal area = 0;
                                decimal width1 = 0;
                                decimal length1 = 0;
                                if (!string.IsNullOrWhiteSpace(width))
                                    width1 = StringHelper.IsDecimal(width);
                                if (!string.IsNullOrWhiteSpace(length))
                                    length1 = StringHelper.IsDecimal(length);
                                area = (width1 * length1) / 1000000;
                                //detailModel.Area = area;
                                detailModel.ChooseImg = chooseImg;
                                detailModel.Gender = gender;
                                detailModel.GraphicLength = length1;
                                detailModel.GraphicMaterial = material;
                                detailModel.GraphicWidth = width1;
                                //if (!string.IsNullOrWhiteSpace(levelNum))
                                //    detailModel.LevelNum = int.Parse(levelNum);
                                detailModel.OrderType = 1;
                                detailModel.PositionDescription = positionDescription;
                                detailModel.Quantity = int.Parse(num);
                                detailModel.Remark = remark;
                                detailModel.Sheet = sheet;
                                detailModel.ShopId = shopId;
                                detailModel.SubjectId=subjectId;
                                detailModel.HandMakeSubjectId = supplementSubjectId;
                              
                                detailModel.MaterialSupport = materialSupport;
                                detailModel.POSScale = posScale;
                                //detailModel.Category = category;
                                //detailModel.SubjectName = subjectName;
                                //detailModel.ShopNo = shopNo;
                                //detailModel.PositionDescription = installPositionDescription;
                                detailModel.MachineFrame = machineFrame;
                                detailModel.AddDate = DateTime.Now;
                                detailModel.AddUserId = CurrentUser.UserId;
                                detailModel.IsSubmit = 1;
                                detailBll.Add(detailModel);
                                successNum++;
                            }
                            else
                            {

                                DataRow dr1 = ErrorTB.NewRow();
                                for (int ii = 0; ii < cols.Count; ii++)
                                {
                                    dr1["" + cols[ii] + ""] = dr[cols[ii]];
                                }
                                dr1["错误信息"] = msg.ToString();
                                ErrorTB.Rows.Add(dr1);
                            }
                        }
                        if (ErrorTB.Rows.Count > 0)
                        {
                            Session["errorTb"] = ErrorTB;
                        }
                        else
                        {
                            Session["errorTb"] = null;
                        }
                        conn.Dispose();
                        conn.Close();
                        if (successNum > 0)
                        {
                            Subject model = subjectBll.GetModel(subjectId);
                            if (model != null)
                            {
                                model.Status = 2;
                                model.ApproveState = 0;
                                subjectBll.Update(model);
                            }
                        }
                        Response.Redirect(string.Format("ImportOrder.aspx?import=1&subjectId={0}", subjectId), false);
                    }
                    else
                    {
                        Panel1.Visible = true;
                        labState.Text = "导入失败：表格里面没有数据！";
                    }
                }

            }
        }

        ShopBLL shopBll = new ShopBLL();
        Dictionary<string, int> shopNoList = new Dictionary<string, int>();
       
        bool CheckShop(string shopNo, out int shopId)
        {
            shopId = 0;
            //msg = string.Empty;
            bool flag = true;
            if (shopNoList.Keys.Contains(shopNo.ToUpper()))
            {
                shopId = shopNoList[shopNo.ToUpper()];
            }
            else
            {
                var shop = shopBll.GetList(s => s.ShopNo.ToUpper() == shopNo.ToUpper()).FirstOrDefault();
                if (shop != null)
                {
                    shopId = shop.Id;
                    if (!shopNoList.Keys.Contains(shopNo.ToUpper()))
                        shopNoList.Add(shopNo.ToUpper(), shopId);

                }
                else
                {
                    //shopId = AddShop(dr, out msg);
                    //if (shopId > 0)
                    //{
                    //    if (!shopNoList.Keys.Contains(shopNo.ToUpper()))
                    //        shopNoList.Add(shopNo.ToUpper(), shopId);
                    //}
                    //else
                    flag = false;
                }
            }
            return flag;
        }

        bool CheckMaterial(string materialName, out decimal price)
        {
            price = 0;
            bool flag = true;
            int customerId = 0;
            if (!string.IsNullOrWhiteSpace(hfCustomerId.Value))
                customerId = StringHelper.IsInt(hfCustomerId.Value);
            if (!string.IsNullOrWhiteSpace(materialName))
            {
                var model = (from orderMaterial in CurrentContext.DbContext.OrderMaterialMpping
                             join customerMaterial in CurrentContext.DbContext.CustomerMaterialInfo
                             on orderMaterial.CustomerMaterialId equals customerMaterial.Id
                             where orderMaterial.CustomerId == customerId && orderMaterial.OrderMaterialName.ToLower() == materialName.ToLower()
                             select customerMaterial).FirstOrDefault();
                if (model != null)
                {
                    flag = true;
                    price = model.Price ?? 0;
                }
                else
                {
                    flag = false;
                }
            }
            return flag;
        }

        
        Dictionary<string, int> subjectList = new Dictionary<string, int>();
        bool CheckSubject(string subjectName, out int supplementSubjectId)
        {
            supplementSubjectId = 0;
            bool flag = true;
            subjectName = subjectName.Trim().ToLower();
            if (subjectList.Keys.Contains(subjectName))
            {
                supplementSubjectId = subjectList[subjectName];
            }
            else
            {
                var model = subjectBll.GetList(s => s.SubjectName.Trim().ToLower() == subjectName && (s.SubjectType ?? 1) == (int)SubjectTypeEnum.POP订单 && (s.IsDelete == null || s.IsDelete == false) && s.ApproveState==1).FirstOrDefault();
                if (model != null)
                {
                    supplementSubjectId = model.Id;

                }
                else
                    flag = false;
            }
            return flag;
        }

        //提交
        protected void btnSubmit_Click(object sender, EventArgs e)
        {
            
            using (TransactionScope tran = new TransactionScope())
            {
                try
                {
                    
                    bool isOk = false;
                    string msg = string.Empty;
                    //var list = new RegionSupplementDetailBLL().GetList(s => s.ItemId == itemId);
                    var list = from order in CurrentContext.DbContext.RegionOrderDetail
                               join shop in CurrentContext.DbContext.Shop
                               on order.ShopId equals shop.Id
                               where order.SubjectId == subjectId
                               select new { 
                                  order,
                                  shop
                               };
                    if (list.Any())
                    {
                        Subject model = subjectBll.GetModel(subjectId);

                        if (model != null)
                        {
                            
                            
                            model.Status = 4;
                            subjectBll.Update(model);
                            isOk = true;
                        }
                        else
                        {
                            msg = "提交失败";
                        }
                    }
                    else
                    {
                        msg = "提交失败：无订单数据！";
                    }
                    if (isOk)
                    {
                        tran.Complete();
                        Alert("提交成功！", "/Subjects/RegionSubject/List.aspx");
                    }
                    else
                    {
                        Alert(msg);
                    }
                }
                catch (Exception ex)
                {
                    Alert("提交失败："+ex.Message);
                }
            }
        }

        protected void btnGoBack_Click(object sender, EventArgs e)
        {
            Response.Redirect("Add.aspx?subjectId=" + subjectId);
        }

        void BindOrder()
        {
            var list = (from order in CurrentContext.DbContext.RegionOrderDetail
                       join shop in CurrentContext.DbContext.Shop
                       on order.ShopId equals shop.Id
                        join subject in CurrentContext.DbContext.Subject
                         on order.HandMakeSubjectId equals subject.Id into subjectTemp
                        from subject1 in subjectTemp.DefaultIfEmpty()
                        where order.SubjectId == subjectId
                       select new { 
                         shop,
                         order,
                         subject1.SubjectName
                       }).ToList();
            AspNetPager1.RecordCount = list.Count;
            this.AspNetPager1.CustomInfoHTML = string.Format("当前第{0}/{1}页 共{2}条记录 每页{3}条", new object[] { this.AspNetPager1.CurrentPageIndex, this.AspNetPager1.PageCount, this.AspNetPager1.RecordCount, this.AspNetPager1.PageSize });
            orderList.DataSource = list.OrderByDescending(s => s.order.Id).Skip((AspNetPager1.CurrentPageIndex - 1) * AspNetPager1.PageSize).Take(AspNetPager1.PageSize).ToList();
            orderList.DataBind();
            Panel2.Visible = list.Any();
        }

        protected void AspNetPager1_PageChanged(object sender, EventArgs e)
        {
            BindOrder();
        }
       
    }
}